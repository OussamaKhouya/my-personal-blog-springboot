-- phpMyAdmin SQL Dump
-- version 5.1.1
-- https://www.phpmyadmin.net/
--
-- Hôte : localhost
-- Généré le : jeu. 17 mars 2022 à 13:29
-- Version du serveur : 10.4.22-MariaDB
-- Version de PHP : 8.1.1

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de données : `myblog`
--

-- --------------------------------------------------------

--
-- Structure de la table `blog_post`
--

CREATE TABLE `blog_post` (
                             `id` bigint(20) NOT NULL,
                             `content` text DEFAULT NULL,
                             `date_created` datetime DEFAULT NULL,
                             `image_url` varchar(255) DEFAULT NULL,
                             `date_updated` datetime DEFAULT NULL,
                             `preview` text DEFAULT NULL,
                             `title` varchar(255) DEFAULT NULL,
                             `category_id` bigint(20) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4;

--
-- Déchargement des données de la table `blog_post`
--

INSERT INTO `blog_post` (`id`, `content`, `date_created`, `image_url`, `date_updated`, `preview`, `title`, `category_id`) VALUES
                                                                                                                              (1, '<p>As you learn the fundamentals of web development and look to enhance your knowledge, it’s important to scour the internet to see what other people are doing and saying. While it’s great to stay up-to-date on trends through magazines and books, web development blogs provide you with an abundance of fresh, free content.&nbsp;Blogs have become increasingly more popular over the years and even though sports and fashion blogs led the charge at first, it’s now very likely that every topic out there has at least one blog dedicated to it.</p><p>Web development blogs can be extremely helpful when looking to expand your knowledge in a particular <a href=\"http://blog.thefirehoseproject.com/posts/finding-your-developer-niche/\">web development niche</a>. However, when searching it’s easy to get overwhelmed with the amount of content that is out there. How do you distinguish between good content and bad content? Because of this difficulty, we decided to compile some of our favorite blogs and urge you to take a look:&nbsp;</p><h4><i>If you’re a beginner…</i></h4><h3><strong>1.&nbsp;</strong><a href=\"http://www.developerdrive.com/\"><strong>Developer Drive</strong></a></h3><p>As mentioned above, this is a perfect option if you’re just beginning your career in web development. By web developers, for web developers, Developer Drive offers the latest news in the world of web development. This includes opinion articles, tutorials, tips &amp; tricks to start off on the right foot. Are you looking to learn how to minimize downtime? How about ensuring your site is secure and easy for consumers to navigate? Or would you like to keep tabs on every Microsoft software release? From JavaScript to mobile development, Developer Drive has you covered.</p><p><a href=\"http://www.developerdrive.com/\"><img src=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.03.20-PM-1024x520.png\" alt=\"Developer Drive Blog\" srcset=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.03.20-PM-1024x520.png 1024w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.03.20-PM-300x152.png 300w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.03.20-PM-768x390.png 768w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.03.20-PM-690x351.png 690w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.03.20-PM-1317x669.png 1317w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.03.20-PM-800x407.png 800w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.03.20-PM-1400x712.png 1400w\" sizes=\"100vw\" width=\"1024\"></a></p><p>You can also follow Developer Drive on <a href=\"https://twitter.com/developerdrive\">Twitter</a> for the latest news and articles.</p><h3><strong>2.&nbsp;</strong><a href=\"https://simpleprogrammer.com/\"><strong>Simple Programmer</strong></a></h3><p>While Simple Programmer was originally created by founder John Sonmez to distill what he learned as a web developer into understandable content, today it is focused on helping software developers, programmers and other IT professionals improve their careers and their lives. &nbsp;This blog gets into the nitty-gritty of being a web developer and if you’ve wondered about something web development related, there’s a good chance they’ve written about it. Simple Programmer puts a fun spin on videos, keeping you engaged with humor while providing valuable content. They’re constantly posting new articles – almost daily – so you’ll never be bored.</p><p><a href=\"https://simpleprogrammer.com/\"><img src=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.12-PM-1024x522.png\" alt=\"Simple Programmer Blog\" srcset=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.12-PM-1024x522.png 1024w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.12-PM-300x153.png 300w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.12-PM-768x392.png 768w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.12-PM-690x352.png 690w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.12-PM-1317x672.png 1317w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.12-PM-800x408.png 800w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.12-PM-1400x714.png 1400w\" sizes=\"100vw\" width=\"1024\"></a></p><h3><strong>3.&nbsp;</strong><a href=\"https://www.codenewbie.org/blog\"><strong>CodeNewbie</strong></a></h3><p>Just like the blog title says – if you’re a code newbie looking for insight on all things web development, you’re in the right place. This site acts as a virtual community for anyone new to the coding world. CodeNewbie offers an open look into the lives of web developers and serves as a place for people to read about career advice while hearing stories from people on their coding journey through the site’s podcasts. &nbsp;</p><p><a href=\"https://www.codenewbie.org/blog\"><img src=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.43-PM-1024x521.png\" alt=\"Code Newbies Blog\" srcset=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.43-PM-1024x521.png 1024w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.43-PM-300x153.png 300w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.43-PM-768x391.png 768w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.43-PM-690x351.png 690w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.43-PM-1317x670.png 1317w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.43-PM-800x407.png 800w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.04.43-PM-1400x712.png 1400w\" sizes=\"100vw\" width=\"1024\"></a></p><p>CodeNewbie originally started as a weekly TwitterChat to connect people learning to code. While they still host a weekly <a href=\"https://twitter.com/hashtag/codenewbie?lang=en\">#CodeNewbie</a>&nbsp;TwitterChat every Wednesday at 9PM EST, it’s evolved into a supportive, international community of people learning to code.</p><p>If you’re early in your coding journey, we’d recommend joining CodeNewbie’s next Twitter chat by following their <a href=\"https://twitter.com/CodeNewbies?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a> page.</p><h4><i>If you’re more experienced…</i></h4><h3><strong>4.&nbsp;</strong><a href=\"https://scotch.io/\"><strong>Scotch.io</strong></a></h3><p>So, you’ve been a web developer for a while, or maybe you’re just a fast learner. Either way, hats off to you! Some of the ‘beginner’ blogs outlined above may be a bit too junior for you, which is where <a href=\"https://scotch.io/\">Scotch.io</a> comes in handy. This blog is full of tutorials on everything from JavaScript to PHP. They also offer some interesting courses that require minimal commitment and can help take your coding expertise to the next level.</p><p><a href=\"https://scotch.io/\"><img src=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.05.57-PM-1024x522.png\" alt=\"Scotch.io Blog\" srcset=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.05.57-PM-1024x522.png 1024w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.05.57-PM-300x153.png 300w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.05.57-PM-768x391.png 768w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.05.57-PM-690x352.png 690w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.05.57-PM-1317x671.png 1317w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.05.57-PM-800x408.png 800w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.05.57-PM-1400x713.png 1400w\" sizes=\"100vw\" width=\"1024\"></a></p><p>Follow Scotch.io on <a href=\"https://twitter.com/scotch_io\">Twitter</a> for the latest content.</p><h4><i>If you don’t like to read, but love tutorials…</i></h4><h3><strong>5.&nbsp;</strong><a href=\"https://tympanus.net/codrops/\"><strong>Codrops</strong></a></h3><p>Codrops is a web design and development blog focused on providing its audience with useful tutorials and articles on the latest trends in the industry. The site has a unique approach to content as its very how-to heavy with videos that walk you through processes applicable to all kinds of web developers. Codrops also publishes experimental videos that focus on new ideas and inspiration for solving problems and tackling challenges around web development. Take a peek and you may walk away with information on how to develop a new skill!</p><p><a href=\"https://tympanus.net/codrops/\"><img src=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.06.21-PM-1024x519.png\" alt=\"Codrops Blog\" srcset=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.06.21-PM-1024x519.png 1024w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.06.21-PM-300x152.png 300w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.06.21-PM-768x389.png 768w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.06.21-PM-690x350.png 690w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.06.21-PM-1317x667.png 1317w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.06.21-PM-800x405.png 800w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/06/Screen-Shot-2018-06-11-at-2.06.21-PM-1400x709.png 1400w\" sizes=\"100vw\" width=\"1024\"></a></p><p>New skills can be attained through many different mediums, but if you’re willing to learn through the internet, reading web development blogs and interacting with their content may be a great option for you.</p><p>Looking for other ways to flex your web developer muscles? Sometimes it’s important to take a step back and set yourself up for success in other ways. Read our latest post on <a href=\"http://blog.thefirehoseproject.com/posts/6-wellness-tips-for-current-and-future-developers/\">6 Wellness Tips For Current (and Future) Developers</a> to learn ways you can stay healthy and continue crushing the web development game for years to come.</p>', '2022-03-15 15:34:11', 'assets/img1.jpg', '2022-03-15 15:34:11', '<p>As you learn the fundamentals of web development and look to enhance your knowledge, it’s important to scour the internet to see what other people are doing and saying. While it’s great to stay up-to-date on trends through magazines and books, web development blogs provide you with an abundance of fresh, free content.&nbsp;Blogs have become…</p>', '5 Web Development Blogs You Should Be Reading', 1),
                                                                                                                              (2, '<h4>When looking to start a career as a software developer, you will probably come across two viable paths to get there: a&nbsp;CS degree from a university, or a&nbsp;coding bootcamp.</h4><p>This means that at some point you’ll have to evaluate a CS degree against a coding bootcamp. While it’s easy to look at superficial things like duration and cost, that’s missing the bigger point of the discussion.</p><p>Coding Bootcamps and CS degrees serve very different roles and the objective of each of them is quite different.&nbsp;</p><p>To be completely honest, when I went to university to study Computer Science, I didn’t fully understand what studying CS meant, or even what the point of it was.</p><p><strong>After one year, I tried to convince my parents to let me drop out of school. I was convinced it was a total waste of time.</strong></p><p>Looking back on the experience of studying Computer Science in university, I realize it was a valuable experience, but my expectations of what the goal or purpose of the education was, was very different than my professor’s goals.</p><p>Let me rewind and walk you through what it means to study computer science in a university. From there we can compare and contrast the education people get from university with the education of coding bootcamps.</p><h3>4-Year College Degree in Computer Science</h3><p>I studied Computer Science at Northeastern University in Boston. &nbsp;My journey with CS started with a class called <i>Fundamentals of Computer Science I </i>aka <i>fundies.</i> &nbsp;The lecture hall was jam-packed on the first day, so much so that many people were forced to stand to attend the class. &nbsp;Moments later, I would find out why.</p><blockquote><p><i>Look to your left and look to your right. &nbsp;Statistically speaking, only one of the three of you will ultimately pass this class.</i></p></blockquote><p>If you go to <a href=\"http://www.ratemyprofessors.com/\">RateMyProfessor.com</a> you will see very different reviews of the professor and the class:</p><p><img src=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.57.11-PM-300x70.png\" alt=\"CS Degree Awesome Review\" srcset=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.57.11-PM-300x70.png 300w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.57.11-PM-768x180.png 768w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.57.11-PM-1024x240.png 1024w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.57.11-PM-690x162.png 690w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.57.11-PM-800x188.png 800w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.57.11-PM.png 1062w\" sizes=\"100vw\" width=\"601\"></p><p><img src=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.48.29-PM-300x81.png\" alt=\"CS Degree Good Review\" srcset=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.48.29-PM-300x81.png 300w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.48.29-PM-768x207.png 768w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.48.29-PM-1024x276.png 1024w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.48.29-PM-690x186.png 690w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.48.29-PM-800x216.png 800w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.48.29-PM.png 1063w\" sizes=\"100vw\" width=\"600\"></p><p><img src=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.47.38-PM-300x81.png\" alt=\"CS Degree Awful Review\" srcset=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.47.38-PM-300x81.png 300w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.47.38-PM-768x207.png 768w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.47.38-PM-1024x276.png 1024w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.47.38-PM-690x186.png 690w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.47.38-PM-800x216.png 800w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-12.47.38-PM.png 1064w\" sizes=\"100vw\" width=\"603\"></p><p>While his statement was true, I found his comment more important because it set the tone for what was to come.&nbsp;</p><p>There are certain requirements that it takes to get a CS degree and a lot of them are pretty difficult.</p><p>I’m going to walk you through the classes necessary to earn that degree so that you can learn from my personal experience and see what it covers, and what it doesn’t:</p><p><strong>Fundamentals of Computer Science I (CS2500)</strong></p><p><strong>Fundamentals of Computer Science II (CS2510)</strong></p><p><strong>Computer Science/Information Science Overview &amp; Co-op Preparation (CS1200)</strong></p><p><strong>Discrete Structures (CS1800 &amp; CS1802)</strong></p><p><strong>Object-Oriented Design (CS3500)</strong></p><p><strong>Computer Systems (CS3650)</strong></p><p><strong>Networks and Distributed Systems (CS3700)</strong></p><p><strong>Theory of Computation (CS3800)</strong></p><p><strong>Programming Languages (CS4400)</strong></p><p><strong>Software Development (CS4500)</strong></p><p><strong>Algorithms and Data (CS4800)</strong></p><p><strong>The Eloquent Presenter (THTR1170)</strong></p><p><strong>Capstone (many options) Database Structures</strong></p><p><br><a href=\"http://blog.thefirehoseproject.com/posts/5-things-you-need-to-know-new-developer/\">When starting University</a> I thought a Computer Science was all about writing code, but I was missing the point.</p><p>Getting a CS degree is deeper than writing code. &nbsp;<strong>Computer Science is all about understanding how computers are able to solve problems for programmers.</strong></p><p>If you review the rundown of the classes I took, you’ll see that I only took a handful of classes that heavily involved writing code:</p><ul><li>2 classes involved writing code in a programming language that is almost never used in industry.</li><li>3 classes involved writing code in ways fairly similar to what development in the real world and the first two classes were really just preparation for the final course of <i>Software Development</i>.</li></ul><p>And because of this, plenty of people who graduate with a CS degree are terrible programmers. &nbsp;Personally, I really struggled with my class on networking. Through cramming, all-nighters and extra help I was able to retain enough to pass the class and immediately forget everything.</p><blockquote><p>Plenty of people who graduate with a CS degree are terrible programmers.</p></blockquote><p>There are some people struggle with the actual coding classes but are great at everything else.</p><p>The people that do well at Computer Science often supplement course materials to learn topics that are more relevant for building projects. &nbsp;My roommate at the time taught himself Python and Django and encouraged me to do the same.</p><p>Instead, I taught myself Ruby on Rails by going through a book I bought at Barnes and Noble. &nbsp;</p><h3>Coding Bootcamp Program</h3><p>Coding bootcamps approach programming education from a different angle. The emphasis is on developing real-world coding skills that can be put into practice, rather than theory.</p><p><strong>Coding bootcamps would focus on skills like:</strong></p><ul><li>The network structures that you will use every day as a programmer.</li><li>How to store and retrieve items from a database.</li><li>How to effectively use a programming language to solve problems.</li></ul><p><strong>But most coding bootcamps don’t cover topics like:</strong></p><ul><li>Underlying network structures that power the Internet, and other things you don’t need to worry about as a programmer.<br>&nbsp;</li><li>How databases are able to use binary trees to retrieve data quickly.<br>&nbsp;</li><li>Using an obscure programming language to design and build a programming language of your own.</li></ul><p><strong>Coding bootcamps cover materials selectively. However, it’s material that is much more practical for day-to-day use.</strong></p><p>For example, after passing the Northeastern class I took on databases, I had no idea how to actually use databases. The class taught me how they are built and strategies to optimize things if it was ever needed.&nbsp;</p><p>Coding bootcamp students will usually have experience using databases in real-world applications, but will not fully understand the strategies that the people who built the database had to ensure queries are done quickly and efficiently.</p><p><img src=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/markus-spiske-109588-300x200.jpg\" alt=\"Database\" srcset=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/markus-spiske-109588-300x200.jpg 300w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/markus-spiske-109588-768x512.jpg 768w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/markus-spiske-109588-1024x683.jpg 1024w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/markus-spiske-109588-690x460.jpg 690w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/markus-spiske-109588-1317x878.jpg 1317w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/markus-spiske-109588-800x533.jpg 800w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/11/markus-spiske-109588-1400x933.jpg 1400w\" sizes=\"100vw\" width=\"554\"></p><p>Although both Computer Science graduates and coding bootcamp graduates often go on to work as developers in the industry, they often have very different perspectives, which is understandable.</p><p>People with a CS degree will understand all aspects of what they’re building, whilst coding bootcamp graduates will understand the tools that are used every day in the industry and how to build projects with real-world application.</p><p>Despite these differences, there is significant overlap between the two, as well:</p><ul><li>CS graduates and coding bootcamp graduates <i>should</i> have the skill to use a programming language to perform transformations on data.</li><li>They should also acquire the skill to look at problems analytically, logically and work backwards from a premise or suggestion.</li><li>Both Computer Science students and bootcamp students should be able to <a href=\"http://blog.thefirehoseproject.com/posts/tricked-boss-hiring-developer/\">get jobs as developers</a> after they graduate.</li></ul><h3>So, Should I Go For a CS Degree or a Coding Bootcamp Education?</h3><p>Ultimately, I think the choice should depend on where you are in life:</p><p>If you’re graduating high school, a CS degree will be more expensive and longer than attending a coding bootcamp. However, it’s a smart choice.</p><p>If you’re looking to make a career change and the commitment of 4 years and hundreds of thousands of dollars isn’t an option, a coding bootcamp could be the right choice for you</p>', '2022-03-15 15:45:08', 'assets/img2.png', '2022-03-15 15:45:08', '<p>When looking to start a career as a software developer, you will probably come across two viable paths to get there: a&nbsp;CS degree from a university, or a&nbsp;coding bootcamp. This means that at some point you’ll have to evaluate a CS degree against a coding bootcamp. While it’s easy to look at superficial things like…</p>', 'CS Degree or Coding Bootcamp: Which Option Makes Sense For You?', 1),
                                                                                                                              (3, '<p>Early in my software engineering career, I had an internship at Microsoft.&nbsp;I was working on the Microsoft Office team. We were responsible for the internals of a distributed peer-to-peer network, and it was one of the most complex applications I’ve ever worked on.&nbsp;My team threw me into the deep end.</p><p>I had to work in a codebase that spanned millions of lines of code and use a programming language that I was completely unfamiliar with.&nbsp;Despite that, I was expected to help the dev team build a better product.&nbsp;<strong>I couldn’t have doubted myself any more than I did. It was scary.</strong></p><p>But by the end of my 6-month internship, I had turned myself into a contributing member of a high-performing team.&nbsp;I had a lot of people to thank, but the most important one was my mentor, Ransom.&nbsp;He took me under his wing and accelerated my learning. Ransom seemed to know everything about the codebase. I’d always see other senior developers knocking on his door to ask for advice. &nbsp;</p><p>To be honest, I was intimidated by Ransom. His time was so valuable. But he always took the time to make sure he put me on the right track and in a position to complete my assigned work. Throughout my internship, I learned more than one powerful lesson while working with him. <a href=\"https://www.inc.com/quora/what-happened-to-me-when-i-told-my-boss-they-were-wrong.html\">I wrote about the most important one on Inc.com a little while back.</a>&nbsp;He taught me so many things about how to help other people learn quickly.</p><p><strong>But here’s the crazy part. I learned the most important lesson from him when he lied on stage at a huge Microsoft conference.&nbsp;</strong>I’ll rewind a little bit to give some context.</p><h2><strong>It was my first few weeks at Microsoft.</strong></h2><p>I was assigned a few basic tasks that would help me get familiar with the codebase, workflow, and product. The first responsibility that I had was to spruce up the automated test suite in a very narrow and specific aspect of the product. After a painstaking month of work, dozens of hours of talking things through with Ransom and other developers, and a number of code reviews that made me start over from scratch, I finally shipped a feature.</p><p>Ransom probably could have done it in only a few hours.</p><p>It was painful.&nbsp;But the process taught me more about programming and problem solving than any other experience I had gone through previously. Over time, I became more and more effective. By the end of my internship, I was shipping features and bug fixes very quickly.</p><p><strong>I was developing a better eye for noticing problems too.</strong></p><p>There was one bug that I remember in particular. There was a problem with the way our files were synced peer-to-peer. I knocked on Ransom’s door to tell him about it.</p><p>I explained the bug to Ransom and walked him through why it was happening. Our code had a sophisticated, thought-out organization. Unfortunately, this edge case didn’t fit inside the paradigm like everything else. Ransom and I decided that it made sense to solve the bugs in this edge case in a way different from the way from how the core of the system was designed.</p><h2><strong>A few weeks later Ransom was set to give a presentation to the entire Microsoft development team.</strong></h2><p>He was scheduled to talk about how our system was architected.&nbsp;He flew out to Redmond, and his presentation was video streamed for developers outside of Redmond. I tuned in to watch it.</p><p>I watched Ransom articulate exactly how our system worked. He broke down the organization of different structures in the application, walked through examples of how our engine could sync things across peer-to-peer networks (plus SharePoint and other endpoints too) and talked about how everything was set up.</p><p><strong>He nailed it.</strong></p><p>It was really cool to see my mentor representing my office on a stage in front of hundreds of people. &nbsp;</p><p>After Ransom finished his presentation, he gave the audience time to ask questions.</p><h2><strong>After about 6-7 minutes, Ransom answered a question in a way that would permanently change the way I thought about teaching.</strong></h2><p>The question was in relation to the system that Ransom and I were discussing a few weeks earlier. The audience member described his interpretation of how he thought out system worked and asked Ransom if his interpretation was correct.</p><p><strong>It was clear that he understood the core of how the system worked, but he overgeneralized it a bit and didn’t account for the edge cases that Ransom and I had discovered.</strong></p><p>When audience asked the question, I closed my eyes and put myself in Ransom’s shoes. I imagined walking through the specifics of this pretty complex bug, some of the limitations of the architecture, the specific workaround, and talking about the specifics. &nbsp;</p><p>But when the audience member said this:</p><blockquote><p><i>“Is it fair to say, that’s how the system is built?”</i></p></blockquote><p>Ransom’s response astonished me:</p><blockquote><p><i>“You could say that…”</i></p></blockquote><p>Ransom lied. Well, lied is probably too harsh a term. But he certainly oversimplified.&nbsp;He certainly didn’t forget the nuances of the problem – we had recently talked about it, and Ransom as one of the smartest devs I had known.</p><p><strong>So why didn’t Ransom correct the audience member handle the situation the way I thought he would?</strong></p><p>There are a lot of reasons why. They all go back to the core of why Ransom was such a great developer and such a great mentor of other developers.</p><p><strong>1. Ransom was confident in his skills</strong>. When you’re an expert on a particular subject it can be tempting to correct people and tell them they’re wrong to prove your expertise. With any system that’s large and complex, any generalization is going to be an over-generalization.&nbsp;But telling people they’re wrong and correcting them based on minutiae is often less productive and far less helpful for the person you’re supposed to be helping. There are ways to teach complex topics without talking down to people.</p><p><strong>2. He realized that the audience member who asked the question understood the core of what he was talking about</strong>. The guy understood how it worked in virtually all situations except a couple really exceptional cases. He was mostly correct and had a solid general understanding of how the architecture was built.&nbsp;In that moment, it wouldn’t have been helpful to correct him in front of the crowd and go into complex edge cases. Doing this would have confused the audience member – and likely the entire audience.</p><p><strong>3. The answer was correct for the person asking it</strong>. &nbsp;For people like me and Ransom, it was important to work in the weeds of the codebase and try to nail down all the edge cases. It’s part of our job. But for people who are just interacting with our codebase, as opposed to the people building it, sometimes the internal structure and edge cases are far less important.&nbsp;<strong>Ransom understood that you need to tailor your teaching to your specific audience.&nbsp;</strong>That’s something that only really good teachers understand how to do.</p><h2><strong>When I teach people to code, I now take on this philosophy.</strong></h2><p>Learning to code is hard. It’s common for beginners to ask questions that will lead to answers that only confuse you more.&nbsp;So when someone asks me a question like this:</p><blockquote><p><i>“Is it true that [something] is always true?”</i></p></blockquote><p>I typically answer it with something like:</p><blockquote><p><i>“Yeah, that’s usually the case.”</i></p></blockquote><p>I try not to answer it with something like:</p><blockquote><p><i>“No, and here’s a handful of reasons why you’re wrong.”</i></p></blockquote><p>Why? Because that’s what Ransom would do.</p><p>If you’re learning to code, you don’t need to understand every complex edge case for every single concept. You’ll go crazy if you try to do it. That’s why I won’t ever push students in that direction.</p><p>As you level up your coding skills, you’ll start to learn more about the intricacies of complex programs and systems. But you should remember that it’s important to slowly build up your core foundation first. Once you understand the broad strokes, you’ll be able to dive into the more complex nuances later on.</p><p><strong>Students often articulate questions in a way that isn’t really what they meant.</strong></p><p>Teachers need to be able to synthesize these questions and answer them in a way that is best for that individual student at that point in time.</p><p><strong>That’s what I try to do. And it’s what we tell every single mentor in the full Firehose program to do as well.</strong></p><p>Put yourself in their shoes of the student and ask yourself, what does this person <i>wish they asked</i>, even if they articulated their question a little differently?&nbsp;That philosophy gives students the best chance to grow and reach their potential without getting stuck along the way.</p>', '2022-03-15 15:47:44', 'assets/img3.png', '2022-03-15 15:47:44', '<p>Early in my software engineering career, I had an internship at Microsoft.&nbsp;I was working on the Microsoft Office team. We were responsible for the internals of a distributed peer-to-peer network, and it was one of the most complex applications I’ve ever worked on.&nbsp;My team threw me into the deep end. I had to work in…</p>', 'My Mentor Lied At A Microsoft Conference. It Taught Me Everything About Teaching Code.', 1);
INSERT INTO `blog_post` (`id`, `content`, `date_created`, `image_url`, `date_updated`, `preview`, `title`, `category_id`) VALUES
                                                                                                                              (4, '<p><a href=\"http://blog.thefirehoseproject.com/posts/exactly-makes-javascript-weird-programming-language/\">JavaScript is a pretty strange programming language</a>. But it’s also pretty cool.&nbsp;Back in 2007, Jeff Atwood (founder of StackOverflow), made a case that JavaScript would become a bigger part of web development. Atwood <a href=\"https://blog.codinghorror.com/the-principle-of-least-power/\">coined the term</a> “Atwood’s Law,” which states:</p><blockquote><p>Any application that can be written in JavaScript, will eventually be written in JavaScript.</p></blockquote><p>It’s now ten years later, and Atwood’s statement is truer&nbsp;than ever. JavaScript is continuing to gain more and more adoption…for good (and bad) reasons.&nbsp;At its core, JavaScript is a mix of some really good ideas and some really bad ones. <strong>The “next generation” of Javascript is something known as ES6.&nbsp;</strong></p><p>JavaScript is actually the term developers use for the ECMAScript language. Modern web browsers can execute version 5 of ECMAScript flawlessly. The next generation of ECMAScript, version 6 (or ES6 for short) doesn’t have full browser compatibility yet. But it’s the direction that the JavaScript language is headed.&nbsp;ES6 has a lot of forward-thinking ideas attached to it and is a really exciting programming language to use.&nbsp;There are a lot of reasons to get excited about it.</p><p><a href=\"http://blog.thefirehoseproject.com/posts/4-year-journey-launching-firehose-advanced-programming-course/\"><strong>And there are a lot of reasons why we decided to build a whole new piece of curriculum around it for&nbsp;our new Advanced Programming Course</strong></a><strong>.</strong></p><p>In this post, I’ll get into the 12 main reasons why ES6 is the future of Javascript and web development.&nbsp;</p><h2>Reason 1: You can write it today.</h2><p>Web browsers might not have full feature support, but that doesn’t mean you can’t use the new features that ES6 has to offer. There’s a cool project called&nbsp;babel&nbsp;that takes ES6 code and&nbsp;transpiles it…meaning it rewrites the code in the older ES5 language.</p><p>This lets developers benefit from new features available in ES6 without waiting for web browsers to catch up to the new technology (and without waiting for your users to update their web browser to use the newest version).</p><p>Super cool.&nbsp;</p><h2>Reason 2: ES6 is really fast.</h2><p>Google spent a lot of time building the Chrome web browser. They also spent a lot of time tuning the algorithms that dictate how JavaScript executes. In the process, they extracted their JavaScript runtime from the web browser into something called NodeJS (which is the JavaScript programming language minus a web browser).</p><p>So, what does all of that mean?</p><p>JavaScript is an incredibly fast and efficient programming language to use for a variety of purposes. And since ES6 can be rewritten to be run in an ES5, ES6 benefits from all of JavaScript’s performance optimizations.</p><h2>Reason 3: ES6 is 100% Backward Compatible.</h2><p>This is an important feature of ES6 that has some interesting tradeoffs.</p><p>As I mentioned before, there are some hiccups in the JavaScript programming language. Douglas Crockford pointed out the&nbsp;bad parts&nbsp;of JavaScript in his book&nbsp;<a href=\"https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742\">JavaScript the Good Parts</a>. In the book, he advises good JavaScript developers to simply&nbsp;opt-out of the bad parts.</p><p>ES6 could have removed these bad parts outright. But the people who designed the language designers opted to leave the bad parts in.</p><p><strong>Why oh why would they do that?!</strong></p><p>JavaScript has a rich ecosystem. It’s filled with thousands of packages on the package manager (NPM), and it has widespread adoption. In order to ensure that ES5 JavaScript packages would always work in the context of the ES6 language, they decided to make the language 100% backward compatible.</p><p>This means that when you start writing ES6, you can start with the regular JavaScript you know and love. You can then slowly start embracing new features and adopting the aspects of ES6 that make your life easier as a developer as you get more comfortable over time.</p><h2>Reason 4: ES6 has Object-Oriented Classes.</h2><p>JavaScript supports a method of inheritance called&nbsp;prototypical inheritance. It’s a version of the inheritance that is a bit different from classical inheritance (or how inheritance works in most other programming languages).</p><p>ES6 supports class syntax. This mirrors other programming languages, but ES6 takes the traditional style of defining classes and inheritance and maps it to the corresponding prototype chain.</p><p>This is a small change, but it can make it a lot smoother to write object-oriented code in ES6 compared to other languages.&nbsp;</p><h2>Reason 5: ES6 has Arrow Functions</h2><p>Functions are a cornerstone of the JavaScript&nbsp;functional&nbsp;programming language. &nbsp;</p><p>But surprisingly, functions behave slightly strangely in JavaScript.&nbsp;</p><p>In JavaScript, something weird happens to the ‘<i>this’</i>&nbsp;keyword within functions. Because of that, developers often have to rebind the variable in ES5. Code like this is pretty common to see:</p><blockquote><p><i>var that = this;</i></p><p><i>function() {</i></p><p><i>&nbsp; &nbsp;console.log(that);</i></p><p><i>}</i></p></blockquote><p>This is because the function rebinds the value of&nbsp;this&nbsp;unless you explicitly rebind the variable.</p><p>This is particularly annoying when writing JavaScript code.&nbsp;</p><p><strong>Why is rebinding annoying? Let me explain through this analogy:</strong></p><p>Think about you as a person. You have properties like a name, address, etc…Imagine that when you’re writing&nbsp;letters, you could use templates. So for a letter signature, you could use something like:</p><blockquote><p><i>Cheers,</i></p><p><i>{person.first_name}</i></p></blockquote><p>But for some really strange reason, this&nbsp;only works when you type. You could potentially use these things when you talk, but before you talk you’d need to explicitly say:</p><blockquote><p><i>“Hey remember who you are when you’re talking so you can reference things like your name, address, etc.“</i></p></blockquote><p>That’s what the below line of code does:</p><blockquote><p><i>var that = this;</i></p></blockquote><p>It’s not difficult to write that line of code. But It’s just stupid to have to do it and to think about.</p><p>Rebinding is particularly annoying when writing JavaScript code.&nbsp;</p><p><strong>But ES6 has a solution.</strong>&nbsp;</p><p>ES6’s solution to the problem is something called&nbsp;arrow functions. Arrow functions are a slightly different syntax to defining functions that behave in a much more logical way in regard to the value of&nbsp;this.</p><p>I’ve found the value of the feature is much more noticeable in ES6 because the class syntax makes it much more intuitive to write object-oriented code in the language. This makes the&nbsp;this&nbsp;keyword much more useful!</p><h2>Reason 6: Modules are built into ES6.</h2><p>Modules have to be one of the most boring aspects of ES6. It’s a feature that wasn’t even built into the JavaScript language initially. Because of this, it brought up an interesting question:&nbsp;</p><p>How can you ensure that different packages do not conflict with each other?</p><p>In regular JavaScript, two different patterns evolved to make it possible to break things into different systems. These systems were&nbsp;CommonJS&nbsp;and&nbsp;AMD.</p><p>These different module systems had different ways of segmenting the module information. They both worked well, but it was possible to find yourself in a situation where you had to use different syntax to load different packages that had different module syntax.</p><p>According to&nbsp;<a href=\"https://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs\">this StackOverflow post</a>:</p><blockquote><p><i>“Arguments around which format is better state that CommonJS attempts to cover a broader set of concerns and that it’s better suited for server-side development given its synchronous nature, and that AMD is better suited for client-side (browser) development given its asynchronous nature and the fact that it has its roots in Dojo’s module declaration implementation.”</i></p></blockquote><p>ES6 includes a built-in module system.&nbsp;Because it’s part of the language, it provides one definitive way to load and export modules.&nbsp;The syntax is also suitable both for server-side and client-side functionality.</p><h2>Reason 7: ES6 has template literal strings.</h2><p>This is one of my favorite features of ES6. It’s a small one, but it’s pretty common to want to build up a string that includes variables within it.</p><p>Ruby has a feature they call&nbsp;string interpolation, which does exactly this. JavaScript had been missing the feature until ES6 came along. ES6 supports it, just with a slightly different name.</p><p>This means that instead of building up a string like, “Hello there, Ken”, but replacing the name Ken with the person you’re addressing name like this:</p><blockquote><p><i>var message = “Hello there, ” + person.name;</i></p></blockquote><p>You can build them fluidly like this:</p><blockquote><p><i>var message = `Hello there, ${person.name}`</i></p></blockquote><p>It’s a small thing, but when building up strings that are built up of many different parts, template literals are enjoyable to use.</p><p>Whenever I use template literal strings in ES6 code, it just feels good to write!</p><h2>Reason 8: ES6 uses Yarn</h2><p>JavaScript packages are frequently loaded from the NPM (Node Package Manager) source. It can take a while to run the command to install all the packages and have them completed. Because of that, sometimes developers can end up with different versions of the packages.</p><p>Facebook built a new client on top of the NPM platform to allow NPM to scale and work on big applications…like Facebook. They also&nbsp;<a href=\"https://code.facebook.com/posts/1840075619545360\">open-sourced</a>&nbsp;the code.</p><p>Yarn, like NPM, allows you to bring dependencies into your project, and it allows you to pull them from the NPM source too. However, Yarn introduces many awesome optimizations. &nbsp;Traditionally running the command:</p><blockquote><p><i>npm install</i></p></blockquote><p>Would install all the third party packages into the project. &nbsp;This process has a few drawbacks.</p><ul><li>First, it’s not “deterministic.” This means that sometimes your machine can get&nbsp;different versions&nbsp;of packages in them then other projects. This generally only happens in massive projects, but it can cause a lot of bugs and confusion.</li><li>Second, it’s pretty slow. &nbsp;Running that command can easily take several minutes to complete. &nbsp;I’ve heard stories of colleagues doing ridiculous things to optimize the process in a small way.</li></ul><p>Yarn fixes both of these things. &nbsp;With yarn, the versions of the packages you get are always consistent. &nbsp;In addition, the command to install them generally runs much&nbsp;faster, which means you can get back to coding a lot more quickly.</p><p>Technically, you can use yarn with regular JavaScript in addition to within ES6, but it’s a pretty recent improvement to the JavaScript ecosystem. Overall, it’s a step in a really good direction for both JavaScript and ES6.</p><h2>Reason 9: ES6 solves the same problems as CoffeeScript but in a better way.</h2><p>The CoffeeScript programming language was designed to cover up a lot of the problems that plagued JavaScript. It was essentially created to make it a lot more difficult for developers to write buggy code.&nbsp;CoffeeScript looks similar to Ruby but works with JavaScript. CoffeeScript developers still need to have a working knowledge of JavaScript, though, because example code, documentation, etc… will only show you how to achieve something in JavaScript.</p><p>ES6 fixes a lot of the problems that JavaScript faced. But since it’s backward compatible with JavaScript code, it’s easy to learn incrementally and start adopting features slowly.</p><h2>Reason 10: In ES6,&nbsp;const&nbsp;and&nbsp;let&nbsp;solve traditional scoping problems.</h2><p>ES6 has the new keywords&nbsp;const&nbsp;and&nbsp;let&nbsp;(realistically replacing JavaScript’s&nbsp;var&nbsp;keyword), which allow developers to write safer code with less worry about leaking the variable out of scope, and&nbsp;prevent you from having duplicate declarations of the variable in the same scope. So, let’s say we wrote the below valid JavaScript code:</p><blockquote><p><i>var a = “hello”;</i></p><p><i>var a = “bye”;</i></p></blockquote><p>This would cause the value to be the final value (in this case ‘<i>bye</i>‘). If we’re doing something like this though, we probably shouldn’t have set the value of the variable initially. This is a mistake. But if we try similar code with a&nbsp;const&nbsp;or&nbsp;let:</p><blockquote><p><i>const a = “hello”;</i></p><p><i>const a = “bye”;</i></p></blockquote><p>This would produce an error that indicates there is a problem:</p><p>TypeError: Identifier ‘a’ has already been declared</p><p>This can help developers catch problems with scoping.</p><h2>Reason 11: ES6 has a cool new feature called the Spread Operator</h2><p>The spread operator is an interesting way to build new arrays based on the values of existing arrays. This feature took me the longest to get a feel for, but once I did, it became one of the features I most appreciate in the ES6 language.</p><p>The&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\">spread operator</a>&nbsp;is a single construct in the ES6 language that is super versatile.</p><p>It’s similar to the&nbsp;splat&nbsp;operator&nbsp;in Ruby.&nbsp;It can do things like:</p><ul><li>Copy an array</li><li>Concatenate arrays</li><li>Insert new items into arrays</li></ul><p>The spread operator is a powerful tool. Once you start figuring it out, it will become your go-to solution when working with arrays. It even makes libraries like <i>underscore</i> or <i>lodash</i> less important, since solutions to manipulating arrays are built directly into the language.</p><h2>Reason 12: ES6 has Promises</h2><p>Promises make the async nature of JavaScript more predictable and friendlier to handle. They provide a consistent way of handling future events instead of arbitrary library specific patterns.</p><p>This makes&nbsp;it a lot simpler&nbsp;to understand how to structure your code.</p><h2>There’s a lot that makes ES6 exciting.</h2><p>Jeff Atwood was right when he talked about JavaScript having a bright future in the programming community. It’s the practical language of choice in a variety of cases.&nbsp;</p><p>But JavaScript isn’t a perfect language. It has a number of flaws. A lot of the flaws were caused by quickly building the language without having a lot of experience working in in it. Over the past 20 years, developers have gotten more and more experience with the JavaScript language, which has lead to improvements.&nbsp;</p><p>ES6 does 3 essential things super well:</p><ul><li>It starts by taking all the aspects of the JavaScript programming language that make it awesome.</li><li>It then works to build constructs to fix JavaScript’s flaws</li><li>It&nbsp;adds some features that make your quality of life as a developer just so much better.</li></ul><p><strong>To say that ES6 has a bright future would be an understatement.</strong> Web browsers are currently working to adopt working with the ES6 code natively, but until that happens, we can use&nbsp;babel&nbsp;to get a step ahead of this cutting edge programming language.</p><p><strong>If you graduated from a coding bootcamp or just want to level up your programming skills, it can make a lot of sense to try out ES6.&nbsp;</strong></p><p>Learning it can be an amazing way to differentiate yourself from other developers and evolve your career.&nbsp;</p><p>It’s also just super fun to use.&nbsp;</p><h2><strong>We just launched a new course that helps you&nbsp;learn ES6.</strong></h2><p>Firehose Advanced Programming&nbsp;is a new course that helps new developers evolve their skills and get experience with new technologies to help them accelerate their careers faster than their peers.&nbsp; We give you dedicated support from our engineering team and a structured curriculum to help you learn ES6 without getting stuck.&nbsp;The course is&nbsp;currently only open to <a href=\"https://www.thefirehoseproject.com/\">Firehose students and graduates</a>, but we plan to release it to a wider audience soon.&nbsp; You can learn more about the course&nbsp;<a href=\"http://blog.thefirehoseproject.com/posts/4-year-journey-launching-firehose-advanced-programming-course/\">from our launch announcement</a>.&nbsp;Stay tuned for the wider launch!</p>', '2022-03-15 15:52:03', 'assets/img4.png', '2022-03-15 15:52:03', '<p>JavaScript is a pretty strange programming language. But it’s also pretty cool.&nbsp;Back in 2007, Jeff Atwood (founder of StackOverflow), made a case that JavaScript would become a bigger part of web development. Atwood coined the term “Atwood’s Law,” which states: Any application that can be written in JavaScript, will eventually be written in JavaScript. It’s…</p>', '12 Reasons Why ES6 is the future of JavaScript and Web Development', 2),
                                                                                                                              (5, '<p>There are people that will tell you that Computer Science fundamentals are arcane concepts that are not practical in the real world.</p><p>I get why people like to&nbsp;talk this way.</p><p>CS concepts; like trees, algorithms, and recursion, aren’t nearly as fun to talk about as exciting fringe technologies.</p><p>But if you start digging into how software actually works in the real world, you’ll find that there are a ton of cases where computer science plays a significant role.</p><p>Every developer needs a programming tool belt, a set of skills that allows you to solve the various software problems that you’re faced with.</p><p>ReactJS could be a tool in your tool belt.</p><p>JavaScript or Ruby on Rails could be one too.</p><p>If you’re trying to become a developer, you should think about CS fundamentals as an additional tool. An understanding of them will help you solve problems in a smart, efficient, and useful way.</p><p>In this post, we’ll dive into 3 really important CS concepts that you’ll need in your tool belt in order to solve a lot of the problems that come your way.</p><p>Let’s get into it.</p><h2><strong>Trees</strong></h2><p>If you spend time on the internet, you’ve probably come across a comment system web application, like Disqus. Web applications like Disqus help facilitate online discussions and make them easy to follow by using a reply functionality.</p><p><img src=\"http://165.227.208.227/posts/wp-content/uploads/2017/04/trees-1.png\" alt=\"\"></p><p>How do you enable this to happen?</p><p>Computer science! That’s how.</p><p>In computer science, there is a concept known as Trees. Trees are an abstract, but incredibly&nbsp;useful programming structure. They’re a “recursive” data structure, which essentially just means that the definition of a tree involves… the definition of a tree.</p><p>You can think about the Trees concept like a family tree. As a person, you have two biological parents. Each of your parents probably has two biological parents too.</p><p>If you map out your family tree, you’ll see that each person is connected to multiple other people.</p><p><img src=\"http://165.227.208.227/posts/wp-content/uploads/2017/04/family-tree-1.png\" alt=\"\"></p><p>This organizational structure is incredibly useful for a ton of real world applications, like commenting systems.</p><p>Let’s return to the Disqus example.</p><p>If you were to design a commenting system, you’d want to have many levels of replies. A comment should have a <i><strong>parent</strong></i> comment, and a number of <i><strong>children</strong></i>, which are sub-comments.</p><p>Trees are what allow you to do this.</p><p>If you understand how to effectively use tree structures, it becomes way easier to figure out simple scenarios like this, in which you want to map the relationship of replies to initial comments.</p><p>Trees also help you with far more complicated scenarios, like writing <a href=\"https://en.wikipedia.org/wiki/Tree_sort\">sorting algorithms</a>. &nbsp;</p><h2><strong>Optimal Algorithms</strong></h2><p>Fortunately, Computer scientists have found optimal solutions for a lot of software problems. This means that if you understand the solutions, you won’t need to start from scratch in order to solve certain problems.</p><p>As an example, think about how you would go about looking up a specific name in a phone book. If the phone book contains a million records, the simplest solution would be to go through the entire book from start to finish. This would ensure that you’d find the specific name. However, in the worst case scenario in which the name is one of the last names in the phone book, you’d need to do nearly 1 million comparisons in order to find it. This would be an incredible&nbsp;waste of time.</p><p>Instead, you should rely on a different solution, one that exists because of computer science. To find the name in the phone book, you could use a smart <a href=\"http://blog.thefirehoseproject.com/posts/what-is-an-algorithm/\">Binary Search Algorithm</a>, which would guarantee that you could find it in at most 20 comparisons.</p><p>At the scale of a 1 millions records, that puts the optimal solution at 50,000 times more efficient than the simplest solution. It only gets more efficient as the list scales to more records.</p><p><strong>Pretty much every application out there uses algorithms to find information in more effective ways.</strong></p><p>So, if you’re a developer who understands how to approach problems the way that computer scientists intended, you’ll be able to write code that is <i>much more efficient</i> than a developer who doesn’t understand algorithms.</p><h2><strong>Recursion</strong></h2><p>Recursion is a method of programming that comes in handy in a variety of different situations. It’s a computer science trick that’s based on a divide and conquer (D&amp;C) mentality that breaks a complex problem into more specific subproblems of a similar type.</p><p>Let me get into what that actually means.</p><p>Recursion is all about thinking about things that are related. You can describe it by making rules of nested elements. A famous example is saying the rule:</p><p><i>All boats should have a lifeboat in case the boat sinks</i>.</p><p>If you go a step further, the lifeboat itself should have a lifeboat. And that lifeboat should have one, too. Things that are recursive&nbsp;in nature have an endless process.</p><p>Another real world example of recursion is a Russian matryoshka doll. You know, those little dolls that are nested within another doll.</p><p>&nbsp;</p><p><a href=\"https://giphy.com/gifs/doll-once-smallest-11wjBYmS9Q9jTa\">via GIPHY</a></p><p>By using the divide and conquer programming mentality of recursion to solve problems, you’re able to solve difficult problems with simple code.</p><p>This is something that comes up all the time for developers.</p><p>On top of that, it’s pretty common to be expected to know how to use a recursive approach to solving problems while on the technical interview, which <a href=\"http://blog.thefirehoseproject.com/posts/getting-your-first-junior-web-developer-job/\">is the only thing between you and your new job as a developer.</a></p><h2><strong>Trees, optimal algorithms, and recursion are 3 aspects of computer science that help developers solve everyday problems.</strong></h2><p>But not all aspects of Computer Science are applicable to everyday programming!</p><p>Despite having plenty of aspects of Computer Science that are useful in everyday type work, there are some aspects of computer science that aren’t&nbsp;practical in day-to-day coding.</p><p>In college, I majored in Computer Science. In the process of getting my degree, I learned some stuff that I never used and pretty much immediately forgot. I’m talking about things like:</p><ul><li>Deterministic &amp; Non-deterministic Finite Automata</li><li>OSI Network Layer Protocols</li><li>An emphasis on how databases are built, vs. actually using them</li><li>Calculus, Physics, and electives</li></ul><p>There are plenty of reasons why getting a <a href=\"http://stories.thefirehoseproject.com/coders-compass/computer-science-degree-vs-coding-bootcamp\">Computer Science degree can make sense</a>. &nbsp;</p><p><strong>But it’s important to know that you don’t need a CS degree to learn the practical aspects of Computer Science fundamentals that will give you the foundation you need to become a developer.</strong></p><p>Some coding bootcamps teach essential computer science fundamentals.</p><p>We do it at <a href=\"http://thefirehoseproject.com/\">Firehose</a>. We do it because we’ve always believed that an understanding of these foundational skills is key to landing your first developer job and setting yourself up for a long and successful career.</p><p>An understanding of things&nbsp;like trees, algorithms, and recursion, are an essential part of your developer tool belt. If you don’t have them, it’s easy to fall into the trap of things like:</p><ul><li>Doing more work than is necessary (writing more lines of code)</li><li>Finding solutions that aren’t as optimal</li><li>Not applying well-known <i>correct</i> solutions to your problems</li></ul><p>If you want to become a programmer, spend time learning the Computer Science fundamentals that matter.</p><p>It might not be the flashiest stuff. But it helps you solve real-world problems and will pay dividends as you move forward in your career as a developer.</p>', '2022-03-15 16:07:07', 'assets/img5.png', '2022-03-15 16:07:07', '<p>There are people that will tell you that Computer Science fundamentals are arcane concepts that are not practical in the real world. I get why people like to&nbsp;talk this way. CS concepts; like trees, algorithms, and recursion, aren’t nearly as fun to talk about as exciting fringe technologies. But if you start digging into how…</p>', 'You Can’t Solve Real World Coding Problems Without These 3 Computer Science Fundamentals', 2),
                                                                                                                              (6, '<p>I wanted to make a recap of the most common and useful advice one can give to tackle Legacy codebases.</p><p>I have a few of my own, but I also went out to ask experimented developers about their opinions.</p><p>I ended up with 7 advice. Let\'s dig into these!</p><h2>1. Stay curious</h2><p>Approach the problem with an open mind.</p><p>Legacy systems are often frustrating to work with. Yet, you probably aren\'t the only one in this.</p><p>Ask questions to your colleagues, discuss with non-technical people, look up for information around. You may be surprised how much you can discover that wasn\'t obvious at first sight.</p><h2>2. First, get it running</h2><p>So many problems to address! An overwhelming mess! I know the feeling.</p><p>When you are dealing with many problems, the most efficient way I know is to start with one and focus on that.</p><p>Can you get the system running on your machine already? Start with that. Once you get it solved, it will help you tackle the other issues.</p><p>You can run it? Great! Then, get the tests running. There is no test runner? Put one in place. Then, make sure you can deploy new versions to production. And so on…</p><p>Pick one problem that will help solve others and focus on that. Get it done, then move to the next one. Don\'t try to tackle everything at once, that doesn\'t work well.</p><h2>3. Take notes as you go</h2><p>When you onboard on a new, legacy codebase, you are in a great position to notice problems!</p><p>As you learn the quirks of the system and how to solve them, take notes. These don\'t need to be polished and all. Raw Markdown notes would do.</p><p>Put these notes in a place where they are easy to search for. That may be Markdown files versioned along with the source code <a href=\"https://understandlegacycode.com/blog/earn-maintainers-esteem-with-adrs/\">as we do for ADRs</a>.</p><p>I find it useful to take notes for things like:</p><ul><li>How I solved problem X (eg. <i>I got this error when installing dependencies, so I did that and it worked</i>).</li><li>Jargon, terms I\'m not familiar with</li><li>The structure of the code, where to put things</li></ul><p>A complimentary piece of advice is to train yourself to detect when you make assumptions.</p><h2>4. Refactor as you go</h2><p>This is very similar to the previous point, but turning the dial up a bit.</p><p>As you work with the code, your understanding will grow. You will have these aha moments. \"Ooooh, that\'s what it does!\"</p><p>You can capture these learnings in notes and code comments. I also recommend you take an extra step and improve the names.</p><p>Functions and variable names are important beacons for understanding. When something wasn\'t obvious at first and it finally clicked, take the time to improve the names so the intention is clearer!</p><p>This is easier to do with a fresh pair of eyes.</p><p>A technique I really like is called <a href=\"https://understandlegacycode.com/blog/demine-codebase-with-exploratory-refactoring/\">Exploratory Refactoring</a> (or \"Scratch Refactoring\"). Allow yourself to do rogue changes in the code. You won\'t keep these changes, so you don\'t care if the code still compiles. The goal is to interact with the code instead of passively reading it. Timebox yourself for 30min. In the end, take notes of what you learned and scratch that work.</p><h2>5. Read books</h2><p>There is not a ton of resources on dealing with legacy systems. But there are a few that are quite good if you ask me.</p><p>​<a href=\"https://understandlegacycode.com/blog/key-points-of-working-effectively-with-legacy-code/\">Working Effectively with Legacy Code</a>, from Michael Feathers, is a reference. I bet many of you have read it already. If you never had the chance, then it\'s the book I would recommend you to read.</p><p>If you have read this one already, <a href=\"https://understandlegacycode.com/#books\">I listed a few more that I found the most relevant</a>.</p><p>Books, blog posts, talks, screencasts… These resources will expose you to new techniques and approaches. These will constitute a useful tool belt for when you are facing a new problem to solve, like identifying Seams in existing code so you can write tests for it.</p><h2>6. Write the missing tests</h2><p>Tests are particularly useful for 3 reasons:</p><ol><li>Gain an understanding of what the code actually does</li><li>Reduce the risk of introducing a bug when making changes</li><li>Identify the main problems of the code design (eg. too many hidden dependencies)</li></ol><p>Writing good tests is a skill to practice. Writing tests on existing code is even harder, because you may need to refactor this code… without tests to have your back!</p><p>That\'s where reading books and watching talks will help. You may already be doing <a href=\"https://michaelfeathers.silvrback.com/characterization-testing\">Characterization Testing</a> by intuition. There are more techniques and tools that can help you do it faster and safer.</p><p>Obvious candidates for me are <a href=\"https://understandlegacycode.com/blog/legacy-of-socrates-8th-edition/#how-we-use-safe-refactoring-to-untangle-gnarly-code-without-tests\">Safe Refactorings</a> and <a href=\"https://understandlegacycode.com/approval-tests\">Approval Tests</a>.</p><p>You don\'t need to write all the missing tests. Just write enough tests for the code you need to change. The time you invest here will be saved in the understanding you gain and the production support you won\'t have to do.</p><h2>7. Make it better, not perfect</h2><p>The most important advice of all, if you ask me.</p><p>This stuff is hard. It\'s overwhelming to work with an existing system, built on old technologies, patched everywhere, yet serving actual people in production! 🙀</p><p><strong>It\'s fine to have a partial understanding of the system.</strong></p><p>Your understanding will grow over time. You will have these aha moments. You can speed up that process by:</p><ul><li>Talking to people</li><li>Taking notes</li><li>Using techniques such as <a href=\"https://understandlegacycode.com/behavioral-analysis\">Behavioral Analysis</a></li></ul><p>Be mindful of yourself. This is a marathon. If you can make it just 1% better every single day, time will be on your side.</p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RqgJUxw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/na4ci1uzyumseebc9wdr.jpeg\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RqgJUxw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/na4ci1uzyumseebc9wdr.jpeg\" alt=\"Tiny gains compound over time\"></a></p><p>When you get overwhelmed by a problem, <strong>take a break and step away</strong>. To talk to people, take a step back. It may not solve your problem, but it may also give you new ideas.</p><p>I solved a lot of problems by simply \"talking to others\" about them.</p><p>Another good example of the \"make it better, not perfect\" mindset is this: consider you want to automate the deployment process (lovely). This can be an overwhelming task, with a lot of intermediate problems to solve…</p><p>Now, what about this:</p><ol><li>You take notes of the steps that need to be performed to deploy</li><li>You put these steps in a script</li><li>You expose this script with a command, like if it would deploy it for you</li></ol><p>This is a trick I learned from <a href=\"https://twitter.com/arlobelshee\">Arlo Belschee</a> (I don\'t recall where, though).</p><p>The script won\'t do the deployment itself. In fact, it may just start with telling you the <i>manual</i> steps you need to do.</p><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--A7oDPiss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj3xbcdapcv93m7p8ikl.jpeg\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--A7oDPiss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj3xbcdapcv93m7p8ikl.jpeg\" alt=\"A script that tells you which manual step to perform next\"></a></p><p>It\'s not fully automated yet but:</p><ul><li>You now have a command to run to \"deploy\"</li><li>It reduces the risk of forgetting about a step</li><li>You can iterate to progressively automate each individual step.</li></ul><p>Over time, this process will be more and more automated. But it doesn\'t have to be 100% automated or nothing. Only a Sith deals in absolutes 😉</p>', '2022-03-15 16:55:44', 'assets/img6.png', '2022-03-15 16:55:44', '<p>I wanted to make a recap of the most common and useful advice one can give to tackle Legacy codebases.</p><p>I have a few of my own, but I also went out to ask experimented developers about their opinions.</p><p>I ended up with 7 advice. Let\'s dig into these!</p>', '7 advice to help you inherit a legacy codebase', 2),
(7, '<p>If we want to get data from an API, or post data to a server, we have to use the fetch API. As is implied by the name, fetch() gives us a way to send and receive HTTP requests through requests and responses.</p><p>The fetch() function is a global function, and it is most frequently used to interact with APIs. If you\'re new to it, you\'re not alone - so let\'s take a look at how fetch() works.</p><h2>How to use fetch in Javascript</h2><p>The most basic use of fetch takes one argument - the URL we want to fetch. When we run fetch, it returns a response:<br>&nbsp;</p><p>let fetchExample = fetch(\"https://fjolt.com\").then((res) =&gt; {\r\n &nbsp; &nbsp;// Do something with res\r\n});\r\n</p><p>&nbsp;</p><p>The cool thing is res has a bunch of built in functions:</p><ul><li>res.text() - returns the text content of a URL. If it\'s a website, it returns the HTML.</li><li>res.json() - returns formatted JSON data, if it exists.</li><li>res.blob() - returns blob data, if any exists.</li><li>res.arrayBuffer() - returns arrayBuffer data, if any exists.</li><li>res.formData() - returns formData data, if any exists. Let\'s look at two examples, to show how this works.</li></ul><h2>Get HTML Content of a Website using Javascript Fetch</h2><p>Since res.text() gives us the text content of a URL, we can use it to get the entire HTML content of a site. Once we run res.text(), we can catch the response with another then, and console log it:<br>&nbsp;</p><p>let websiteData = fetch(\"https://fjolt.com\").then(res =&gt; res.text()).then((data) =&gt; {\r\n &nbsp; &nbsp;return data;\r\n}); \r\n// Now contains our website\'s HTML.\r\n</p><p>&nbsp;</p><p>If the link doesn\'t exist, or an error occurs, our response object will return an error. For example, a page not found will return 404, or a bad gateway error will return 502.</p><h2>Get JSON Content from a Link using Javascript Fetch</h2><p>Another common use of fetch is to get the response of an array. If we want to get the response from an API formatted in JSON, we can use the res.json(). For example, the following code will return a JSON object from the URL, assuming the URL is sending valid JSON back:<br>&nbsp;</p><p>let apiResponse = fetch(\"https://fjolt.com/api\").then(res =&gt; res.json()).then((data) =&gt; {\r\n &nbsp; &nbsp;return data;\r\n});\r\n// Now contains a JSON object - assuming one exists\r\n</p><p>&nbsp;</p><h2>Options for Javascript Fetch</h2><p>Since fetch sends and receives HTTP requests, it has a lot of options we can use with it, as well as the URL. They come after the URL, as an object - i.e. fetch(URL, { options }). If you\'ve worked with HTTP requests before, some may be familiar. An example of all options available are shown below:<br>&nbsp;</p><p>fetch(\"https://fjolt.com/\", {\r\n &nbsp; &nbsp;body: JSON.stringify({ someData: \"value\" })\r\n &nbsp; &nbsp;method: \'POST\'\r\n &nbsp; &nbsp;mode: \'cors\'\r\n &nbsp; &nbsp;cache: \'no-cache\'\r\n &nbsp; &nbsp;credentials: \'same-origin\'\r\n &nbsp; &nbsp;headers: {\r\n &nbsp; &nbsp; &nbsp;\'Content-Type\': \'application/json\'\r\n &nbsp; &nbsp;},\r\n &nbsp; &nbsp;redirect: \'follow\'\r\n &nbsp; &nbsp;referrerPolicy: \'no-referrer\'\r\n});\r\n</p><p>&nbsp;</p><h2>Here is a summary of what each of these mean:</h2><ul><li><strong>body</strong> contains the body of the text. In this example, we are sending some JSON, which needs to be stringified. method is a standard HTTP method. It can be POST/GET/DELETE/PUT/CONNECT/PATCH/TRACE/OPTIONS.</li><li><strong>mode</strong> refers to if cross origin requests are accepted. It can be cors/no-cors/same-origin.</li><li><strong>cache</strong> refers to how the browser will interact with the cache. It can be default/no-cache/reload/force-cache/only-if-cached.</li><li><strong>credentials</strong> refers to if cross origin cookies should be sent with the request. It can be include/same-origin/omit. headers contains any header associated with the request. It can contain any HTTP header - for example, here it shows -Content-Type - but you can have custom HTTP headers too. redirect determines what happens if the fetched URL redirects. It can be follow/error/manual.</li><li><strong>referrerPolicy</strong> determines how much referrer information is passed with the request. It can be no-referrer/no-referrer-when-downgrade/origin/origin-when-cross-origin/same-origin/strict-origin/strict-origin-when-cross-origin/unsafe-url.</li></ul><h2>Javascript Fetch is asynchronous</h2><p>When we use fetch, it goes off to the URL we defined, gathers the information, and brings a response back to us. This is not immediate, since loading the URL and bringing it back takes time. If we simply run fetch alone, the console log will return a Promise, not the response from the URL we want:<br>&nbsp;</p><p>let apiResponse = fetch(\"https://fjolt.com/api\");\r\n\r\nconsole.log(apiResponse); // Returns Promise&lt;Pending&gt;\r\n</p><p>&nbsp;</p><p>This happens because the fetch() function runs, but Javascript doesn\'t wait for the response. As such, we have to explicitly tell Javascript to wait for it, if we want to access the response.</p><p>There are two ways to wait for fetch():</p><ul><li>We can use <strong>then</strong>, and manipulate the response of our fetch() in the then loop.</li><li>We can use <strong>await</strong>, and wait for the fetch to return before using its contents.</li></ul><h3>Using then to wait for a fetch in Javascript</h3><p>One way to access data from a fetch() call is to chain then onto our fetch, allowing us to access the response from our URL. The contents of fetch() can be manipulated within the then() callback function, but not outside of it. For example:<br>&nbsp;</p><p>let apiResponse = fetch(\"https://fjolt.com/api\").then(res =&gt; res.json()).then((data) =&gt; {\r\n &nbsp; &nbsp;console.log(data);\r\n &nbsp; &nbsp;// We can do anything with the data from our api here. \r\n &nbsp; &nbsp;return data;\r\n});\r\n\r\nconsole.log(apiResponse); // This will return Promise&lt;Pending&gt;\r\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// That means we can\'t use the apiResponse variable\r\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// outside of the then() function. &nbsp;\r\n</p><p>&nbsp;</p><p>If we want to use the contents from fetch() outside of a then function, we have to use await.</p><h3>Using await to wait for a fetch in Javascript</h3><p>The other way to wait for a fetch is to use the await keyword. <a href=\"https://caniuse.com/?search=top%20level%20await\">Most modern browsers support Top level awaits</a>, but if you are concerned about support, or using a version of Node.JS before 14.8, you\'ll want to wrap any await code within an async function.</p><p>If we use await, we can use the response from our API anywhere in our function or code, and use any response functions, like text() or json() on it. For example:<br>&nbsp;</p><p>// Typically we wrap await in an async function\r\n// But most modern browsers and Node.JS support\r\n// await statements outside of async functions now.\r\nasync getAPI() {\r\n &nbsp; &nbsp;let apiResponse = await fetch(\"https://fjolt.com/api\");\r\n &nbsp; &nbsp;let response = apiResponse.json();\r\n &nbsp; &nbsp;// Since we waited for our API to respond using await\r\n &nbsp; &nbsp;// The response variable will return the response from the API\r\n &nbsp; &nbsp;// And not a promise.\r\n &nbsp; &nbsp;console.log(response);\r\n}\r\n\r\ngetAPI();\r\n</p><p>&nbsp;</p><p>If you want to learn more about async operations, <a href=\"https://fjolt.com/article/javascript-async\">read my tutorial on asynchronous Javascript here</a>.</p><h2>Conclusion</h2><p>In this guide, we\'ve gone through how fetch works. We\'ve shown the different options you can send with your fetch() requests, and how to wait for the response using asynchronous concepts in Javascript. fetch() is an incredibly powerful tool in Javascript, and is used frequently in big products all the time. I hope you\'ve enjoyed this article.</p>', '2022-03-15 16:58:45', 'assets/img7.png', '2022-03-15 16:58:45', '<p>If we want to get data from an API, or post data to a server, we have to use the fetch API. As is implied by the name…</p>', 'How fetch works in Javascript', 2);
INSERT INTO `blog_post` (`id`, `content`, `date_created`, `image_url`, `date_updated`, `preview`, `title`, `category_id`) VALUES
(8, '<p>Software Product Development Lifecycle is the process of planning, creating, testing, and deploying software. It is a pre-defined framework adopted by software enterprises. Each product would have a different software development model such as Waterfall, Spiral, V-model, Rad, Agile, etc., so the SDLC varies according to models. In this blog post, we shall check out the 8 stages of the Software Development Life Cycle.</p><h2>1. Ideation</h2><p>This is the stage where we brainstorm our ideas. The ideas may not be concrete or executable, yet we can note them down. The aim behind doing this is to refine the ideas in the upcoming stages to bring innovation into the picture. The process can be done in group discussions manually or with the help of software tools. Some of the AI-based tools for this process are Milanote, XMinds, etc. Irrespective of the methods, the stakeholders are always a part of the discussion. The client’s needs are on priority in all the stages.</p><h2>2. Planning and Analysis</h2><p>In this stage, the ideas are refined and filtered based on market trends, client’s needs, the budget estimate of the project, time, etc. The features and functions of the software product are defined and documented. The Software Requirements Specification (SRS) document is created in this phase.</p><h2>3. Feasibility Study</h2><p>Here, the practical resources to implement the above plans are listed. This includes the technology stack, budget, team allocations, working environments, etc. The feasibility study considers economic factors, legal standards, technical needs, operational feasibility, time frame, etc. The Software Requirements Specification (SRS) document from the previous stage comes in handy here.</p><h2>4. Design and Prototyping</h2><p>In the design phase, the front-end features of the application such as User Interface for the intended platforms, for example, Android-iOS or Windows-MacOS, templates, color palettes, and boilerplates, are created. The UI and UX of the designs are worked on and finalized in this stage. This can be done by creating prototypes. A prototype is an early version of a software product, which can be used to give the user an idea about the product in the future. The user can interact with the prototype. Based on their inputs, the product’s design is refined, and features to be implemented in the development phase are listed clearly. In the modern SDLC, we perform testing at all phases, so usability testing is carried out here. In some cases, the prototypes undergo modification or are discarded. Sometimes more than one prototype is given to the users allowing them to choose the best option. In this case, A/B testing is carried out, which helps the teams decide which option to proceed with, based on the user’s choices.</p><h2>5. Development</h2><p>In this phase, the designs are converted to functional software. The source codes are written by the developers using the previously decided tools, languages, and frameworks. A large code is split and written by many developers; therefore, a source code management application is a must in this phase. The application allows the developer to track the changes made to the code and control the access. Apart from coding, the development team needs to upskill themselves in case they’re opting for new technology. The team is responsible for fixing errors and glitches, to ensure that the code is compiled successfully. Proper documentation is created in this phase, which acts as a guide for the software product.</p><h2>6. Testing</h2><p>After the source code is written, it is tested by the test engineers either manually or by using tools like JIRA, Jenkins, Selenium, etc. The code may be free from bugs, but it should pass all the test cases also. The testers frame the test cases and test the software accordingly. There are different types of testing such as accessibility testing, functional testing, black box testing, load testing, integration testing, interactive testing, security testing, white-box testing, etc. The testing team re-sends the code/module to the development teams when the test cases do not get satisfied.</p><h2>7. Deployment and Delivery</h2><p>The software is deployed in increments into the marketplace or ground reality. Depending upon the enterprise, the deployment process begins either manually or automatically using Application Release Automation (ARA) tools to the production environment. These tools are mostly linked with the continuous integration tools to facilitate successful incremental releases of the working software. In this phase, the functioning software is delivered wholly to the production environment if the increments are successful. Otherwise, the increments are rolled back and fixed and then deployed again.</p><h2>8. Monitoring and Maintenance</h2><p>Once the software product is delivered, it is constantly monitored to look out for defects and issues that the user might encounter. The user feedback and reviews are analyzed. The respective teams fix the defects or improvise the software products. The bug fixes may not flow through the entire cycle, but a well-planned process is carried out so that the fix doesn’t introduce other problems. This practice is also known as regression.</p><p>I hope this blog post gave you a clear idea of the 8 stages of the <a href=\"https://fibonalabs.com/services/product-development\">Software Development Life Cycle</a>. The tasks in each stage may be performed together, or are independent. A successful SDLC would require cooperation and smart work across all the teams. In recent times, adopting DevOps tools and best practices in the SDLC has become a norm. This helps to speed up the software product development process by automating, otherwise manual processes. Irrespective of the best practices adopted, understanding the user’s requirements and queries is the key to optimizing the whole software product development process.</p>', '2022-03-15 17:00:05', 'assets/img8.png', '2022-03-15 17:00:05', '<p>Software Product Development Lifecycle is the process of planning, creating, testing, and deploying software. It is a pre-defined framework adopted by software enterprises. Each product would have a different software development model such as Waterfall, Spiral, V-model, Rad, Agile, etc.,</p>', 'What Are The 8 Stages of Software Development Life Cycle?', 1),
(9, '<p>The day has come; you’ve decided it’s time for a change and soon your unfulfilling job will be a distant memory. You’ve been following others as they find their own developer niche, and have officially decided it’s time to turn your dream career into your new career.</p><p>As you venture down the road to becoming a web developer, you’ll be faced with numerous decisions, the first of which is the most important:</p><p><i>What kind of web developer will I be?</i></p><p>The simplest way to tackle this question is by first determining the types of developer opportunities exist. So, let’s take a deeper dive into the <i>kind</i> of web developers there are and then, how you can find your developer niche within those opportunities.</p><h3><strong>Web Development 101</strong></h3><p>When you first heard the words ‘web developer’ it’s possible that you first thought of a front-end developer. These developers build what you see on the website page – the front-end of the website that is consumer facing. On the flip-side, a back-end developer builds what exists behind the scenes. And then there is a full-stack developer: someone who is familiar will all levels of development and has an interest in all technologies associated with web development. Now, this may seem like common sense to many, but it is important to walk through each step of defining who <i>you </i>are as a developer to make a <a href=\"http://blog.thefirehoseproject.com/posts/front-end-development-vs-back-end-development/\">fully-informed decision.</a></p><p>It’s no secret that the demand for web developers is continuing to grow at a rapid rate. In fact, according to the <a href=\"https://www.bls.gov/ooh/computer-and-information-technology/web-developers.htm#tab-6\"><strong>Bureau of Labor Statistics</strong></a>, “employment of web developers is projected to grow 15 percent from 2016 to 2026, much faster than the average for all occupations”. And this is in the United States alone. This is due to the fact that web developers are now needed within every industry, not just tech firms. So sure, we understand now that there is a high demand for these jobs, but with that comes a greater desire from others to become a web developer. What sets you apart from the competition and how can you truly find your developer niche?</p><h3><strong>What’s Your Developer Niche?</strong></h3><p>Your answer to this question will determine your entire <a href=\"http://blog.thefirehoseproject.com/posts/14-tips-to-successfully-start-a-career-in-coding/\">career as a developer</a>. However, before you can adequately answer, there are a few starter questions you must ask:</p><ol><li>What are my passions?</li><li>What are my strengths? Weaknesses?</li><li>What would set me apart from other web developers?</li></ol><p>Let’s first take a closer look at defining passions. You currently sit in an office Monday thru Friday, but on the weekends you and your roommates go brewery hopping.</p><p>Or, you’ve been a first responder on the scene of accidents for the past 11 years, most of the time confined to the inside of an ambulance. Outside of work hours, you enjoy ballroom dancing with your partner and often travel to various cities for competitions throughout the year.</p><p>You get the idea. These are your passions. These are the activities you choose to do in your spare time and are a great place to start when deciding what kind of web development you want to pursue. Is there a brewery in your city whose website may need some TLC? Start there; once you’ve developed your core skills, reach out to the owners and express your desire to help them create a more inviting website that will excite both them and their fellow beer drinkers. This would be your front-end developer opportunity.</p><p><img src=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/05/karolina-szczur-504607-unsplash-1024x683.jpg\" alt=\"Craft Beer for the People\" srcset=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/05/karolina-szczur-504607-unsplash-1024x683.jpg 1024w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/05/karolina-szczur-504607-unsplash-300x200.jpg 300w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/05/karolina-szczur-504607-unsplash-768x512.jpg 768w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/05/karolina-szczur-504607-unsplash-690x460.jpg 690w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/05/karolina-szczur-504607-unsplash-1317x878.jpg 1317w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/05/karolina-szczur-504607-unsplash-800x533.jpg 800w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2018/05/karolina-szczur-504607-unsplash-1400x933.jpg 1400w\" sizes=\"100vw\" width=\"1024\"></p><p>It’s also important to be honest with yourself in answering question number two. Think of this as an interview question. If a potential employer asked what your strengths are, how would you answer? I’m great at time management; I’ve conquered user interface, etc. And for the weaknesses? Sometimes I’m a bit too literal – it would benefit me to think out-of-the-box, be a more creative thinker. Playing to your natural strengths can set you up for a successful career as a web developer.&nbsp;</p><p>Now you’ve gotten to the third question: <i>what would set me apart from other web developers? </i>Well, if you’ve done your homework on questions #1 and #2, you’ll find that it may be easier than expected to answer #3. What sets you apart from the competition is your love for beer. Your desire to work for a company that shares your passions. You may not necessarily want to be a web developer for Google and that is OK. You could work for a beer company, or a nonprofit instead.</p><p>Or you’re a logical-thinker, and you love the technical aspects of bringing a website to life. You don’t truly care about the outward-facing user experience, but your passion lies in building the infrastructure of the website. This would be your back-end developer opportunity.</p><p>So, there you have it. It’s time to do some research. Get out there and first learn everything you can about web development and the intricacies of the roles. Then stay true to yourself and know that the path you set out on today can determine where the rest of your career may take you.</p>', '2022-03-15 17:02:05', 'assets/img9.png', '2022-03-15 17:02:05', '<p>The day has come; you’ve decided it’s time for a change and soon your unfulfilling job will be a distant memory. You’ve been following others as they find their own developer niche, and have officially decided it’s time to turn your dream career into your new career. As you venture down the road to becoming…</p>', 'Finding Your Developer Niche in a Crowded Space', 3),
(10, '<h4><strong>When you start working towards your first developer job, things seem pretty simple. Put in the time, learn the skills, and start applying for jobs when you feel comfortable to do so.</strong></h4><p>There’s no challenge that a few Google searches can’t fix. You feel like you’re on fire! You’re great at this and more than ready for your first developer job! But then there comes a point when it feels like every step forward is two steps back. You start to gain awareness of the vast depth of knowledge you don’t have.</p><p>Maybe you’re not as good as you thought after all?</p><p>In the beginning, you’re much like a toddler – ruling your household and in control of everything within your domain. But then, your parents open the front door and expose you to a whole world outside. That world is scary, and you go from being someone who is completely in control and comfortable in their environment to someone who may feel helpless.</p><p>Many people say they feel this way when learning to program. There comes a moment when they become&nbsp;conscious of how vast the world of programming really is.</p><p>So, if this is the case – when during this process will you be ready to go for your first developer job?</p><p><img src=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/12/glenn-carstens-peters-203007-1024x681.jpg\" alt=\"web developer job\" srcset=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/12/glenn-carstens-peters-203007-1024x681.jpg 1024w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/12/glenn-carstens-peters-203007-300x200.jpg 300w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/12/glenn-carstens-peters-203007-768x511.jpg 768w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/12/glenn-carstens-peters-203007-690x459.jpg 690w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/12/glenn-carstens-peters-203007-1317x876.jpg 1317w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/12/glenn-carstens-peters-203007-800x532.jpg 800w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/12/glenn-carstens-peters-203007-1400x932.jpg 1400w\" sizes=\"100vw\" width=\"1024\"></p><h4><strong>The real answer is, you’ll never be fully ready.</strong></h4><p>And it’s not because that’s how long it takes to master some hyped technology out there. It’s because that’s what it takes to grasp the fact that you will never learn everything there is to know about programming.</p><p>There’s just too much to learn.</p><p>At a certain point, you just have to dive in and go for it. It’s all about being able to <a href=\"https://realworldcoding.io/just-keep-on-keeping-on-9d4ff160af8f\">be productive and keep going</a> in a world you don’t fully understand. There’s chaos in this world. And bugs. And nobody really fully understands it. People who know more than you will try to help you learn, but everyone has limits to their knowledge.&nbsp;</p><p>Given the way software is built, it’s amazing that anything on the internet is working at all. If you’ve never written software for a company, you probably think the process is something like launching a spaceship. First, from a lab, the ideal solution is crafted up by meticulously taking measurements, building a prototype, and running a series of complex tests on the prototype. Then, you can engineer the rocket, launch it, and celebrate the success.</p><h4><strong>In reality, it’s more like fixing a broken go-cart with WD-40 and duct tape while going downhill.</strong></h4><p>At first, nobody is ready to careen downhill in a broken go-cart going 45MPH with nothing but duct tape and WD-40 to fix it. You could spend years studying the properties of different brands of duct tape and all the novel ways to use it, and although you might figure out how to make the best vest out of duct tape, it’s not going to help you when your tires blow out.</p><p>In this way, the feeling people wait for to start putting themselves out there for their first developer job is one that isn’t going to ever come.</p><p>You might think that if you learn the latest and shiniest technology, it will make you feel more prepared. It won’t. Instead, you’ll just be more distracted by the fact that you don’t know some other unimportant detail.</p><p>Successful career changers start before they’re ready.</p><p>This means that if one company tells you no, you shouldn’t take it personally. Instead, you should have the self-confidence to keep going when other people would have given up.</p><p>When you <a href=\"http://blog.thefirehoseproject.com/posts/expectations-of-a-junior-developer/\">start as a junior developer</a>, you’re not expected to have all the answers.</p><p>So don’t act like it. Get comfortable being vulnerable and honest. Feel okay going outside your comfort zone. Inaction is a thousand times worse than rejection.</p><p>If you think you’re in a position where you’re able to break problems down and contribute on a team,&nbsp; you will be able to hit the ground running from day one at a company and you should start putting yourself out there.</p>', '2022-03-15 17:03:02', 'assets/img10.png', '2022-03-15 17:03:02', '<p>When you start working towards your first developer job, things seem pretty simple. Put in the time, learn the skills, and start applying for jobs when you feel comfortable to do so. There’s no challenge that a few Google searches can’t fix. You feel like you’re on fire! You’re great at this and more than…</p>', 'Why You’ll Never Be Fully Ready For Your First Developer Job', 3),
(11, '<p>Consider all the different types of software you use in everyday life: Facebook to see what your friends are up to, Google Chrome to browse the internet, Skype to contact friends and family, and Spotify to listen to music. Despite serving wildly different purposes, what do all these pieces of software have in common? The answer is that they are all written by a technical team working together to build the best program possible.</p><p>If you want to help build best-in-class software for everyone to use, one of the&nbsp;most critical things to master is how to become a productive member of a technical team. When starting a career as a web developer, you will be thrown into a team of other developers, both junior and senior, and expected to be able to add value from day one.</p><p>Developing software as part of a team has a huge upside for junior developers. Other members of your team have an interest in providing you mentorship and helping you become an even better developer. Through constant feedback on your code, you can expect to consistently improve and learn something new every single day. Working on a team, however, requires a different skill set than you would need working by yourself.</p><p>Becoming a productive team member is something you can only learn by actually placing yourself inside a real group project, going through the trial-and-error process, while being in a supportive environment. This means you’ll need to code together on a project with other people, who are as invested as you are in seeing the project be a success.</p><p>Working in the right group environment will help you become a happy and productive team member that other developers want to work with. In addition to this, it will also teach you 7 key skills that are critical to getting hired as a web developer.</p><h4>Skill 1: Learn to Initiate GitHub Pull Requests &amp; Code Reviews</h4><p>When working by yourself, you alone are responsible for the quality of the code. That means if you take sloppy short-cuts or write poor quality code you will be the only person that has to pay the price. When working as part of a technical team, it is the whole team’s responsibility to make sure that only high-quality, well tested, and bug-free code is accepted into the project.</p><p>The best teams require <i>code reviews </i>before code changes are accepted into a project, to ensure the quality of the code is up to their high standards. Code reviews happen when another team member, who was not involved in writing the code, reviews the proposed code additions and changes line-by-line, and looks for things that could potentially cause unexpected problems.</p><p>Because code reviews happen frequently, GitHub comes with advanced features empowering teams to easily perform code reviews.</p><p>Requesting a code review prior to new code being accepted into the main branch is known as issuing a <i>pull request</i>, and the best technical teams don’t allow any code to enter their project without going through this pull request process.</p><p>In this process, you present your proposed code changes and allow other developers to look through those changes.</p><p>Below is a <a href=\"https://github.com/theFirehoseProject/chess/pull/38/files\">GitHub pull request</a> example from one of our Firehose Project students. The lines of code that are removed are displayed in red, and the lines of code that are added are displayed in green.</p><p><img src=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/10/GitHub-Pull-Request-300x201.png\" alt=\"GitHub Pull Request Example\" srcset=\"http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/10/GitHub-Pull-Request-300x201.png 300w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/10/GitHub-Pull-Request-768x514.png 768w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/10/GitHub-Pull-Request-690x462.png 690w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/10/GitHub-Pull-Request-800x536.png 800w, http://blog.thefirehoseproject.com/posts/wp-content/uploads/2017/10/GitHub-Pull-Request.png 975w\" sizes=\"100vw\" width=\"465\"></p><p>You can see how a mentor used the inline code commenting feature on particular lines of code, to help a student organize his code better</p><p>Whether you’re looking to contribute to open source projects or work on a technical team you’ll be expected to have the following skills:</p><ul><li>Create new pull requests and propose your code changes to the team.</li><li>Make notes on other people’s code about things you think they might’ve overlooked in their code.</li><li>Respond to people’s concerns about your code, either through code changes or comments on the GitHub platform.</li></ul><p>As a developer, your job isn’t just to implement features, but to write code that implements features that lives up to your team’s high standards. This means that responding to feedback on your code is critical for you to be an effective developer. By responding to feedback on GitHub you will continue to grow, and become a stronger developer.</p><h4><strong>Skill 2: Learn to Break Large Problems into Smaller Ones</strong></h4><p>Each team member works as a multiplier on the amount of code the team can produce. In order to reap the rewards of having many people contributing to the same project, large tasks need to be broken into small tasks that can be worked on in parallel.</p><p>For example, if you are working on building a BlackJack game by yourself it would be your task to do the following:</p><ul><li><i>Build a BlackJack Game</i></li></ul><p>Yet if you have a team of people building the same BlackJack game, the same project could be broken into smaller chunks that each member could execute on in parallel.</p><ul><li><i>Build a landing page for the web application</i></li><li><i>Store emails that for users who have opted-in into a MailChimp account</i></li><li><i>Build a representation of a deck of cards in the code</i></li><li><i>Support users logging-in and logging-out</i></li><li><i>Make the page look awesome on Mobile</i></li></ul><p>By breaking large tasks into small pieces the team will be able to make many small steps towards the eventual goal of the completed application.</p><p>Most projects, even in the professional world, never will be fully completed since there are always additional features you can add to any existing application. It’s not uncommon for a <i>product backlog</i>, a list of features that are desired but aren’t built yet, to take an estimate of a year or more to complete!</p><p>Because technical teams often have so much work, software is built by having constant steps in the right direction, and breaking large features into smaller ones plays a huge role in getting to the finish line, one step at a time.</p><h4><strong>Skill 3: Implement Test-Driven Development for Future Success</strong></h4><p>Having a robust test suite is more important when working on a team rather than if you’re a <a href=\"http://blog.thefirehoseproject.com/posts/best-team-tactics-to-write-software/\"><i>cowboy coder</i></a> or coding all by yourself. This is because projects can amass a lot of code, think 10,000 lines or more, and can quickly get very complicated. With that much code, someone who hasn’t worked directly with a particular section of the application before cannot be expected to know every nuance of how the application works.</p><p>By writing tests when you build the feature you prevent other team members (or your future self) from inadvertently breaking the application in ways you cannot predict as you’re building the software.</p><p>Having the entire test suite take more than 10–20 minutes to run a complex project is pretty normal. Professional web developers often use “Continuous Integration” tools to help them run their test suits. Those Continuous Integration tools automatically run your tests for each pull request and help prevent members from accepting broken tests into the code.</p><h4><strong>Skill 4: Navigate Merge Conflicts and Improve Communication</strong></h4><p>Merge conflicts happen when two team members attempt to make contradictory, or conflicting, changes. Good communication as a team can help prevent avoidable conflicts, but sometimes they just happen as a result of building software as part of a technical team.</p><p>Here’s a scenario that could potentially cause a merge conflict:</p><p>Say Marco and I are working on the same project, the Firehose Project landing page. Right now the headline of the page says: “Your Software Career Starts Here”.</p><p>If I change the headline to be, “Your Software Career Starts Today” and Marco changes the headline to be, “Start Your Software Career Here” at the same time, we end up with a merge conflict. In short, one of us won’t be allowed to send our code changes up to GitHub until we deal with the fact that we tried to change a single line of code in two different and contradicting ways at the same time.</p><p>In this example, if Marco and I communicated better about changing the headline, we could have avoided this merge conflict. In many cases, particularly when dealing with complicated projects, conflicts will come up. Learning how to stay calm, communicate with other team members to fully understand their thought process about the change they made, and resolve the conflict to achieve both your goals and the goal your teammate had when they made the change, is a skill you can only learn by coding together as a team.</p><h4><strong>Skill 5: Utilize Stand-up / Scrum Meetings to Share Knowledge</strong></h4><p>Since communication between technical team members is critical, most teams will have frequent meetings, known colloquially as “stand-ups”.</p><p>During the meeting members of the technical team are asked to quickly update other members of the team with the following details:</p><ul><li>What did you work on since that previous meeting?</li><li>What are you going to work on between now and the next meeting?</li></ul><p>By having each member talk for 60–120 seconds about what they’re working on, other team members, who often times know more about potential problem areas of a specific feature can prevent a team member from going down an avoidable rabbit-hole.</p><p>Stand-up Meetings are designed to be between 10 and 15 minutes, and everyone on the team is required to stand for the duration of the meeting. Standing during the process of the meeting tends to speed up the meeting, and focuses people on the most important topics.</p><h4><strong>Skill 6: Use Pair Programming to Provide Constructive Feedback</strong></h4><p>Sometimes when you work on projects you’ll find yourself working on intensely complicated problems. Other times you’ll find yourself working on more straightforward tasks. When you’re responsible for tasks that you’re struggling to complete, it’s incredibly valuable having another team member to work with.</p><p>This collaboration process between you and another teammate, to tackle difficult coding problems, is known as pair programming. During pair programming sessions one member of the team will sit behind the keyboard, write code and “drive” the interaction. The other person will sit behind the person and watch the coding process and provide real-time feedback.</p><p>Gaining skills in leading the code that is being written and giving real-time feedback in a productive way is an important skill to master. When starting out it can be intimidating to code in front of other people, knowing they’ll give you feedback as you code. Pointing out potential problems in other people’s code, in a collaborative manner is also a skill that takes time to learn.</p><h4><strong>Skill 7: Learn to Work in a Constantly Evolving Environment</strong></h4><p>One of the biggest challenges to get used to when working as part of a technical team is getting comfortable working in an environment where many people are writing complicated code, and not becoming overwhelmed with the process.</p><p>When building features as a team, and many lines of code change rapidly every single day, it’s important to stay laser-focused on the task you’ve been assigned. Although code is consistently evolving around you, you need to trust your team and the process.</p><p>Since code is continually changing, frequently updating the code you’re working with and making sure you’re working with the latest code is important. This process is known as “pulling down” the code that was contributed by other team members, and getting in the habit of pulling multiple times per day will save you from working on code that isn’t up to date.</p><h4><strong>So, How Will These Technical Team Skills Help You Get Hired?</strong></h4><p>Learning how to collaborate, communicate and use the right tools is incredibly important when building projects as a part of a technical team. Having said that, all group project experiences aren’t created equally.</p><p>In the real world, working on a team doesn’t always go smoothly and everyone knows that. What is important is how challenges that come up while working as a team are resolved.</p><p>Questions about working on a team frequently come up during the technical interview process. Hiring managers are particularly interested in the types of challenges you have faced when working as a team and how you overcome those challenges. Your answers and experiences give them a real-world and valuable view into your problem-solving skills as a developer and a technical team member.</p><p>When you’re asked to describe a challenge you’ve overcome working on a team everyone learns something. On the other hand, if you indicate that you’ve never had any problems coding collaboratively, the team who is evaluating you as a candidate will likely believe that you are either very inexperienced or not telling the truth. Either way, you are unlikely to get that job.</p><p>Instead, speaking from specific experiences about the importance of clearly communicating with other team members and how to overcome communication problems when they arise will impress the team that is comparing you against other candidates for the position.</p><p>If you’re looking to switch careers, it is critical that you have experience working on complex applications as a team. This is because in the real world, even when you’re working with teams of “only” 4–8 other developers, projects get complicated quite quickly.</p><p>Hiring managers won’t be impressed if you’ve built simple applications that simply display information from a database on the screen as a team. On the flip side, building a project like a chess game, which is incredibly complicated, and deals with intense logic will be a lot more impressive.</p><p>Although on the surface a chess game may not sound very complicated, it has many complicated features. For example:</p><ul><li>How would you validate that a queen can move to a particular location on the board, given where the other pieces are on the board?</li><li>How would you enable the <i>castling </i>move?</li><li>How would you make <i>en passant </i>work?</li><li>How would you update the board for user #2, when user #1 moves the piece without requiring a page refresh.</li><li>How would you check for checkmate/check?</li></ul><p>One of our students who worked on a group project got a job at a company in NYC and the 2-hour interview process mostly entailed reviewing her code and pull requests from building the chess app during her group project.</p><p>You should make sure to keep the goal of a group project in mind. It’s all about building a complex application; not necessarily to have thousands of users use it. Rather than trying to come up with ideas that would have the highest potential to be used, you should focus your efforts on a learning as much as you can during the group project.</p>', '2022-03-15 17:03:48', 'assets/img11.png', '2022-03-15 17:03:48', '<p>Consider all the different types of software you use in everyday life: Facebook to see what your friends are up to, Google Chrome to browse the internet, Skype to contact friends and family, and Spotify to listen to music. Despite serving wildly different purposes, what do all these pieces of software have in common? The…</p>', '7 Key Skills You’ll Develop Working in a Technical Team', 3),
(12, '<p>When you’re searching for your first job as a developer, there is one thing you can never get enough of. The time you have each day to find and apply to jobs, build your network, and keep your skills sharp is limited. You’ll want to use your time wisely, but it’s usually not obvious what that looks like.</p><p>What can you do to figure this out? Should you focus on working hard? Or working smart? The answer: you absolutely need to do both.</p><p>There’s a common reason most people don’t take this approach: it’s so much easier said than done. Think about it. Would you rather spend the time you have today assessing what you’re doing wrong and why, or working heads-down to get as much done as possible?</p><h4>It’s easy to get into a routine based on what you initially thought would work, when in actuality, it doesn’t.</h4><p>Evaluating your progress without getting defensive is difficult, but adjusting your strategy as you go is critically important to your success. Here’s a story from my past to help illustrate my point.</p><p>I was a sophomore in college looking for my first co-op (or 6-month-long internship). We had a class that prepared us for the process with pointers and what to expect. I started applying to various companies, and a handful reached out to me to schedule an interview. In total, I went on six or seven interviews. Every single one turned me down. But in response, I just kept doing my thing. Even though most of my friends had already landed their internship, I was relatively unconcerned. Until I received an email from a school counselor about scheduling a meeting.</p><p>When we met, he started by asking me a super direct question:</p><blockquote><p>Ken, what are you doing wrong?</p></blockquote><p>I thought for a moment and I responded with something like:</p><blockquote><p>I’m not really doing anything wrong… not that I know of, anyway.</p></blockquote><p>He continued on, asking me a number of pointed questions and drilling down to the two major causes of my troubles.</p><ul><li><strong>First,</strong> I was applying for all the wrong jobs.</li><li><strong>Second,</strong> I was terrible at interviewing.</li></ul><p>I had been applying to the positions that sounded flashy and exciting. This included places like video game companies that were looking to hire more experienced developers for a second or third internship. The positions sounded super compelling, but I was competing against developers who already had tons of experience. I was competing way outside of my league. My counselor showed me examples of job listings that matched my level of experience. He pointed out specific ones and suggested I apply to them. They were a lot less flashy than the ones I had been going for.</p><p>He then gave me a quick mock interview.</p><blockquote><p>Let’s do a quick exercise. If I was an interviewer and asked about your biggest weakness, what would you say?</p></blockquote><p>I forget what I talked about, but I remember being very candid and a pretty harsh critic of myself.</p><blockquote><p>You’re being too honest, Ken. You need to show yourself in the best light possible. You should be taking every possible avenue to demonstrate why you’re an <strong>awesome candidate</strong>. You don’t need to go in-depth about your flaws; look for ways to spin it into an opportunity to talk about what you’re good at.</p></blockquote><p>I went home and applied for the positions my advisor suggested. I scored a couple more interviews, and even got some job offers. I accepted my first job in the field helping other developers as a developer in <i>test</i>, ensuring that the product the team was building worked. In no time, I started working on the core product, writing a lot of code every day.</p><h4>Often times, it can feel more comfortable and effective to go on autopilot than to take a step back and address whether what you’re doing is really working or not.</h4><p>In our meeting, Mark asked me some really hard questions that forced me to think about what I was doing and realize I needed to change things up radically. The job search process can be tough, but achieving success just requires you zoom out, reflect on what you’re doing, and try to learn from the process.&nbsp;<i>Until you work smart, your hard work won’t pay off. </i>And if you only work hard, you’ll never know how to work smart.</p><p>Here are 4 questions you can ask yourself to audit how you’re using your time:</p><h4>How have you become a better developer in the past week?</h4><p>You should constantly be honing your craft and becoming a better developer. If you focus all of your energy on the job search and none on actually coding, you’re inherently moving in the opposite direction. It’s a terrible feeling when you’re asked a question in an interview that you would’ve been able to answer a few weeks ago had you not neglected to spend time doing what you really care about. Make sure you’re pushing forward in the right direction on all accounts.</p><h4>What have you learned about the job hunt process in the past week?</h4><p>At the end of the day, the process is what counts. Once you learn how to navigate the job market, you’ll have learned the most valuable lesson. It’s a lot like coding in that you can only really learn by jumping in the deep end and actually trying it.</p><h4>What are you going to do differently in the upcoming week?</h4><p>The only way to learn more about the job search process is by trying different things. When you’re not making the progress you expect, try new things, like:</p><ul><li>Applying for positions that work with programming languages you don’t know. Most hiring managers care more about experience with programming in general and <a href=\"http://blog.thefirehoseproject.com/posts/stay-relevant-developer-everything-changing-around/\">the foundations that never change!</a></li><li>Using different methods to source available jobs. Mix everything together– from the people you meet at coding events, to traditional job listings and your network. Always use multiple approaches in tandem and have a strategy for <a href=\"http://blog.thefirehoseproject.com/posts/web-developer-job-search-guide/\">managing your job search funnel.</a></li></ul><p>Lastly, when you find yourself having trouble, don’t hesitate to ask the hard question:</p><h4>What could you be doing differently to make the process easier or better?</h4><p>For me, it was facing that question honestly and really understanding it that led me to my first position as a developer. My hope is that asking a similar question can help you, too.</p>', '2022-03-15 17:04:20', 'assets/img12.png', '2022-03-15 17:04:20', '<p>When you’re searching for your first job as a developer, there is one thing you can never get enough of. The time you have each day to find and apply to jobs, build your network, and keep your skills sharp is limited. You’ll want to use your time wisely, but it’s usually not obvious what…</p>', 'How to Optimize Your Time in the Developer Job Search', 3);
INSERT INTO `blog_post` (`id`, `content`, `date_created`, `image_url`, `date_updated`, `preview`, `title`, `category_id`) VALUES
(13, '<p>Technology is evolving rapidly.&nbsp;Overall, this is an exciting thing. But it can be exhausting to try to stay relevant as a developer. &nbsp;It’s hard to keep up with so many changes. This is especially the case with Javascript becoming more and more prevalent. There are newer and newer technologies coming out all the time that are all competing against each other.</p><p>Should you learn Angular 1? Did you know Angular 2 is out? They actually recently released Angular 4 recently too.</p><p>What about Ember? They had a big rewrite. And Ember 2? Isn’t that better than ever? &nbsp;</p><p>What about React? &nbsp;What should you learn? How do you stay up to date?</p><p>And what about WebPack?</p><p><strong>Everything in the programming ecosystem is changing so fast.</strong></p><p>Even senior developers experience something called <i>JavaScript fatigue</i>. And if senior developers face it, how can someone looking to break into the industry ever imagine to stay up to speed?</p><h2><strong>Take a deep breath…</strong></h2><p>You’ve got this.</p><p>In 1975, Frederick Brooks wrote a book called the Mythical Man Month. In the book, Brooks discusses situations where programmers work together. Believe it or not, pretty much everything he talked about still rings true today.</p><p>This is despite the fact that Brooks was working with the ALGOL programming language and OS/360 while writing it. These are two technologies that are distant relics of a prior generation of programming.</p><p><strong>The good news is… in programming, some stuff simply doesn’t change that much.</strong></p><p>Most <a href=\"https://studywebdevelopment.com/top-programming-languages-to-learn-in-2017.html\">new programming languages</a> and frameworks adopt core programming ideas and use them in different ways.</p><p>To put it another way, a lot of programming ideas are like episodes of the hit 1980’s show The A-Team. In my opinion, this is arguably one of the best shows ever created.</p><p>&nbsp;</p><p><a href=\"https://giphy.com/gifs/80s-mr-t-the-a-team-x5nmmdqVE2x4Q\">via GIPHY</a></p><p>If you’re tuning into a new episode of The A-Team, you can be pretty sure that a few things are going to happen:</p><ul><li>Mr. T is going to refuse to go on a plane.</li><li>A member of the crew will give him some milk, which has sedatives that will cause Mr. T to pass out.</li><li>HM Murdock will fly the crew out.</li><li>The bad guys will get what’s coming to them.</li></ul><p>The specific details of each episode might change a little bit, but you really only need to watch one or two episodes of the show to get a feel for what to expect.</p><p><strong>The same is true for programming.</strong> Different <a href=\"http://stories.thefirehoseproject.com/coders-compass/7-most-in-demand-programming-languages\">programming languages </a>might have slightly different syntaxes and nuances, but overall they are pretty similar.</p><h2><strong>Big picture concepts work in different languages.</strong></h2><p>For example, to understand <a href=\"http://blog.thefirehoseproject.com/posts/what-i-learned-about-becoming-a-developer-from-building-a-40000day-business/\">Ruby</a>, you need to understand how to break problems down using object-oriented principles. If you look at other programming languages like Java, C++, C#, and Swift…they all are object-oriented too! Python? You guessed right! It’s also an object-oriented programming language.</p><p>The same can be said about <i>inheritance</i>.</p><p>The underlying skills of programming aren’t necessarily flashy. And they don’t change around a lot. This is good news!</p><p>This means programming skills like…</p><ul><li>Learning how to break large complex problems into smaller, more manageable problems, using individual function calls.</li><li>Breaking apart classes into multiple classes with a single responsibility.</li><li>Researching programming problems to find out if other people have found the solutions for them.</li></ul><p>And even more specific things like…</p><ul><li>How Ruby on Rails uses a Model/View/Controller patterns to separate the responsibilities of a web application.</li></ul><p>…can apply to other languages and frameworks too! ExpressJS, for example, is another popular web framework. You can break apart those applications using the exact same patterns that you follow in Ruby on Rails (if you want).</p><p>Focus your efforts on the below things:</p><ul><li><a href=\"http://blog.thefirehoseproject.com/posts/be-an-in-demand-developer/\">Learning how to break apart problems</a></li><li>Working on an agile team</li><li>Mastering the big picture concepts</li></ul><p>If you do all of that, you’ll be able to <a href=\"https://workspace.thefirehoseproject.com/get-started?utm_source=blog&amp;utm_medium=site&amp;utm_campaign=unpaid&amp;utm_content=how_to_stay_relevant_as_a_developer\">build real projects</a> in any programming language.</p><h2><strong>Don’t fall into the trap of endlessly chasing the next shiny new thing.&nbsp;</strong>&nbsp;</h2><p><a href=\"http://learntocodewith.me/posts/forget-traditional-school/\">It can be tempting to try to learn it <i>all</i></a>…only understanding things at a surface level. Don’t.</p><p><i>You can go wide or you can go deep, but you can’t go both.</i></p><p>If you choose to focus your energy on deeply learning a specific tool or framework, you’ll find it easier to draw on your experience to help you learn an additional language or framework.</p><h2><strong>The flashiest aspects of a particular skill aren’t necessarily the most important.</strong> &nbsp;</h2><p>If you go on Hacker News, you’ll find a variety of cutting edge technologies.</p><p>If you’re looking to break into the field of web development, should you go all-in on a cutting edge technology like Elixir or Rust?</p><p><strong>Probably not…</strong></p><p>It’s just not practical to go all-in on something that might not have a big community. You’re losing out on a wealth of people with practical experience to learn from just in case something may or may not take off.</p><p>Instead, it’s much more practical to pick a proven technology with a wealth of information and learn the fundamentals of programming in that language.</p><p><strong>Think about this:</strong></p><p>What do you think Jason Mraz, Lady Gaga, Bob Marley and Elton John have in common? Probably more than you might imagine.</p><p>If you listen to <strong>Axis of Awesome’s Four-Chord Song</strong>, you’ll realize that all modern pop songs follow similar formulas…even from pretty radically different bands. In the case of the specific song, if you use a pretty standard four-chord progression, pretty much every pop song ever can fit into it.</p><p>&nbsp;</p><p><strong>The same is true for programming languages and frameworks.</strong></p><p>Once you learn one or two languages, picking up another isn’t terribly difficult. Different languages have different features, and when you get experience working in a couple of them, you’ll appreciate the benefits and drawbacks of the different languages.</p><h2><strong>It’s important to really master fundamentals early in your career. &nbsp;</strong></h2><p>If you’re just f&nbsp;to becoming a professional developer, focus on the stuff that won’t change first.</p><p>I’ve recently written about how I got hired as a web developer with <a href=\"http://blog.thefirehoseproject.com/posts/tricked-boss-hiring-developer/\"><strong>virtually no experience in web development</strong></a>. I got hired because my fundamentals of programming were really strong, even if I didn’t have a wealth of experience with the specific language or framework.</p><p><strong>If you take this mentality and focus on breaking apart complex problems into easier to manage ones, you’ll learn the skills you need to stay relevant as a programmer…even while everything is changing around you.</strong></p><p>So if you’re terrified of&nbsp;<a href=\"https://www.inc.com/quora/what-happened-to-me-when-i-told-my-boss-they-were-wrong.html\">making the wrong decision</a>, take a deep breath.</p><p>The fundamentals of programming will apply to <i>any</i> programming language, framework, or mentality.</p><p>Pick a language, learn it, then really master it. In the process, you’ll master the fundamentals of programming and be able to apply them to any other language or framework later down the line.</p>', '2022-03-15 17:05:04', 'assets/img13.png', '2022-03-15 17:05:04', '<p>Technology is evolving rapidly.&nbsp;Overall, this is an exciting thing. But it can be exhausting to try to stay relevant as a developer. &nbsp;It’s hard to keep up with so many changes. This is especially the case with Javascript becoming more and more prevalent. There are newer and newer technologies coming out all the time that…</p>', 'How To Stay Relevant As A Developer While Everything Is Changing Around You', 3),
(14, '<p><strong>Learning to code is hard.</strong> It’s so common to have doubts about yourself or your skill level. Maybe you feel like you’re simply going through the motions because you can’t reproduce everything yourself without a certain amount of guidance.</p><p>Referring back to previous code, notes, or documentation is normal and something that even senior developers often need to do.</p><p><strong>Take a step back.</strong> Take inventory of how many times you’ve actually done a particular task or action related to programming or development.</p><p>For example, if you’ve built 5 full projects, that means you’ve only run the specific commands to create a new project 5 times. Don’t be discouraged if you don’t have the exact steps committed to memory– you’ve only done it a few times!</p><p>It takes a lot of time to commit things to memory, especially when you’re learning something completely new. And at the end of the day, your memory is not a measure of your skill or ability as a developer. Even if you don’t remember something, you’re not a bad developer.</p><p>Look at this tweet from DHH, the creator of Rails:</p><p>&nbsp;</p><p>&nbsp;</p><p><i><strong>Even the creator of Rails needs to look stuff up.</strong></i> Try not to be so hard on yourself!</p><p>Here are five things you need to know and do:</p><p>1. <strong>There is always more to learn:</strong> Take a big breath! You started programming how long ago? DHH has been programming for years and years. When you get upset or frustrated that you do not understand something or know something off the top of your head, just look at that tweet from DHH and remind yourself that it’s normal and <strong>there is always more to learn.</strong></p><p>2. <strong>Build a foundation:</strong> Set your focus on building a solid foundation. Don’t worry about the specific language or tools, and work on the process. Learn how different data structures work, their nature and properties, and how to manipulate them. <strong>When you have a solid foundation, you can rise above the tools and better excel in all tasks.</strong></p><p>3. <strong>Be self-sufficient:</strong> One of the most important things you can do as a developer is strive to <a href=\"http://blog.thefirehoseproject.com/posts/learn-to-code-and-be-self-reliant/\">be self-sufficient</a>. <strong>That means being able to problem solve, debug, and teach yourself new skills in an efficient manner.</strong></p><p>4. <strong>Immerse yourself:</strong> Learning to code is like learning a new language. The best way to really absorb and learn is to <strong>immerse yourself</strong> in the language everyday. The more practice and exposure to different problems, aspects, and nuances of programming and development you have, the more things will click and make sense.</p><p>5. <strong>Learn your weaknesses:</strong> I went through several technical interviews and bombed a few of them. Treat each interview as a learning experience. In first interview as a new developer, I realized I didn’t really know enough about HTTP requests, so I went home and did research on HTTP requests. <strong>I recognized a weakness and set out to make it a strength.</strong></p><p>Most of all, remember you’re not alone. Don’t let your doubt stop you. With enough determination and hard work, you can succeed!</p>', '2022-03-15 17:05:48', 'assets/img14.png', '2022-03-15 17:05:48', '<p>&nbsp; Learning to code is hard. It’s so common to have doubts about yourself or your skill level. Maybe you feel like you’re simply going through the motions because you can’t reproduce everything yourself without a certain amount of guidance. Referring back to previous code, notes, or documentation is normal and something that even senior…</p>', '5 Things You Need to Know as a New Developer', 3);

-- --------------------------------------------------------

--
-- Structure de la table `blog_post_category`
--

CREATE TABLE `blog_post_category` (
  `id` bigint(20) NOT NULL,
  `category_name` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Déchargement des données de la table `blog_post_category`
--

INSERT INTO `blog_post_category` (`id`, `category_name`) VALUES
(1, 'EDUCATION & TRAINING'),
(2, 'INDUSTRY KNOWLEDGE'),
(3, 'CAREER ADVICE');

--
-- Index pour les tables déchargées
--

--
-- Index pour la table `blog_post`
--
ALTER TABLE `blog_post`
  ADD PRIMARY KEY (`id`),
  ADD KEY `FK7brl6yqlwdkg1c2caqs9xks10` (`category_id`);

--
-- Index pour la table `blog_post_category`
--
ALTER TABLE `blog_post_category`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT pour les tables déchargées
--

--
-- AUTO_INCREMENT pour la table `blog_post_category`
--
ALTER TABLE `blog_post_category`
  MODIFY `id` bigint(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;